
lab1-01.10.21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004518  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004978  08004978  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020294  2**0
                  CONTENTS
 10 .bss          000005f8  20000294  20000294  00020294  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000088c  2000088c  00020294  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ada2  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b53  00000000  00000000  0002b066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  0002cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000700  00000000  00000000  0002d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228c2  00000000  00000000  0002da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f60  00000000  00000000  00050312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0482  00000000  00000000  0005a272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a6f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025f8  00000000  00000000  0012a748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000294 	.word	0x20000294
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080046b0 	.word	0x080046b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000298 	.word	0x20000298
 80001ec:	080046b0 	.word	0x080046b0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <MX_GPIO_Init+0xd4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a2d      	ldr	r2, [pc, #180]	; (800068c <MX_GPIO_Init+0xd4>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_GPIO_Init+0xd4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <MX_GPIO_Init+0xd4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a26      	ldr	r2, [pc, #152]	; (800068c <MX_GPIO_Init+0xd4>)
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_GPIO_Init+0xd4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_GPIO_Init+0xd4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a1f      	ldr	r2, [pc, #124]	; (800068c <MX_GPIO_Init+0xd4>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_GPIO_Init+0xd4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_GPIO_Init+0xd4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <MX_GPIO_Init+0xd4>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_GPIO_Init+0xd4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_GPIO_Init+0xd8>)
 8000646:	f001 f9dd 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800064a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_GPIO_Init+0xdc>)
 8000660:	f001 f80c 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000664:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0xd8>)
 800067e:	f000 fffd 	bl	800167c <HAL_GPIO_Init>

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40020800 	.word	0x40020800

08000698 <set_green_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_green_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	461a      	mov	r2, r3
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <set_green_led+0x20>)
 80006ac:	f001 f9aa 	bl	8001a04 <HAL_GPIO_WritePin>
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40020c00 	.word	0x40020c00

080006bc <set_yellow_led>:

void set_yellow_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	461a      	mov	r2, r3
 80006ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <set_yellow_led+0x20>)
 80006d0:	f001 f998 	bl	8001a04 <HAL_GPIO_WritePin>
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <set_red_led>:

void set_red_led(bool on) { HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET); }
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	461a      	mov	r2, r3
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <set_red_led+0x20>)
 80006f4:	f001 f986 	bl	8001a04 <HAL_GPIO_WritePin>
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020c00 	.word	0x40020c00

08000704 <is_btn_clicked>:

int is_btn_clicked() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	// GPIO_PIN_RESET means pressed
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET && HAL_GetTick() - last_pressed_time > 1000) {
 8000708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <is_btn_clicked+0x3c>)
 800070e:	f001 f961 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10f      	bne.n	8000738 <is_btn_clicked+0x34>
 8000718:	f000 fe00 	bl	800131c <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <is_btn_clicked+0x40>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000728:	d906      	bls.n	8000738 <is_btn_clicked+0x34>
		last_pressed_time = HAL_GetTick();
 800072a:	f000 fdf7 	bl	800131c <HAL_GetTick>
 800072e:	4603      	mov	r3, r0
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <is_btn_clicked+0x40>)
 8000732:	6013      	str	r3, [r2, #0]
		return 1;
 8000734:	2301      	movs	r3, #1
 8000736:	e000      	b.n	800073a <is_btn_clicked+0x36>
	} else return 0;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40020800 	.word	0x40020800
 8000744:	200002b0 	.word	0x200002b0

08000748 <set_no_one_led>:

void set_no_one_led(bool on) {}
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <print>:
struct State state = {
    .state = { 0 },
    .elapsed_state_time = { 0 },
};

void print(const char * content) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	if (use_interrupt) {
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <print+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d015      	beq.n	800079c <print+0x3c>
		while (!is_transmitted);
 8000770:	bf00      	nop
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <print+0x5c>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f8      	bne.n	8000772 <print+0x12>
		is_transmitted = false;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <print+0x5c>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart6, (void *) content, strlen(content));
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fd3c 	bl	8000204 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	b29b      	uxth	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <print+0x60>)
 8000796:	f001 ff18 	bl	80025ca <HAL_UART_Transmit_IT>
	} else HAL_UART_Transmit(&huart6, (void *) content, strlen(content), UART_TIMEOUT);
}
 800079a:	e009      	b.n	80007b0 <print+0x50>
	} else HAL_UART_Transmit(&huart6, (void *) content, strlen(content), UART_TIMEOUT);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fd31 	bl	8000204 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	230a      	movs	r3, #10
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <print+0x60>)
 80007ac:	f001 fdd9 	bl	8002362 <HAL_UART_Transmit>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200002b5 	.word	0x200002b5
 80007bc:	20000002 	.word	0x20000002
 80007c0:	20000834 	.word	0x20000834

080007c4 <println>:

void println(const char * message) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	print(message);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffc7 	bl	8000760 <print>
	print("\r\n");
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <println+0x1c>)
 80007d4:	f7ff ffc4 	bl	8000760 <print>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080046c8 	.word	0x080046c8

080007e4 <print_format>:

void print_format(const char * format, ...) {
 80007e4:	b40f      	push	{r0, r1, r2, r3}
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
	static char buffer[1024];
	if (use_interrupt) while (!is_transmitted);
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <print_format+0x48>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <print_format+0x20>
 80007f4:	bf00      	nop
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <print_format+0x4c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1f8      	bne.n	80007f6 <print_format+0x12>
	va_list ap;
	va_start(ap, format);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), format, ap);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <print_format+0x50>)
 8000814:	f002 fea8 	bl	8003568 <vsniprintf>
	va_end(ap);
	println(buffer);
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <print_format+0x50>)
 800081a:	f7ff ffd3 	bl	80007c4 <println>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr
 800082c:	200002b5 	.word	0x200002b5
 8000830:	20000002 	.word	0x20000002
 8000834:	200002e0 	.word	0x200002e0

08000838 <string_equals>:

bool string_equals(const char * a, const char * b) { return strcmp(a, b) == 0; }
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fcd3 	bl	80001f0 <strcmp>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf0c      	ite	eq
 8000850:	2301      	moveq	r3, #1
 8000852:	2300      	movne	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <starts_with>:

bool starts_with(const char * prefix, const char * str) { return strncmp(prefix, str, strlen(prefix)) == 0; }
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fccb 	bl	8000204 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f002 fe39 	bl	80034ec <strncmp>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <set_active_mode>:

void set_active_mode(uint8_t mode_number) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	led_functions[modes[cur_mode_n].states[state.state[cur_mode_n]].color](false);
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <set_active_mode+0x90>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <set_active_mode+0x90>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <set_active_mode+0x94>)
 80008a8:	5c9b      	ldrb	r3, [r3, r2]
 80008aa:	491f      	ldr	r1, [pc, #124]	; (8000928 <set_active_mode+0x98>)
 80008ac:	00da      	lsls	r2, r3, #3
 80008ae:	4603      	mov	r3, r0
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	4403      	add	r3, r0
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	3304      	adds	r3, #4
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <set_active_mode+0x9c>)
 80008c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c6:	2000      	movs	r0, #0
 80008c8:	4798      	blx	r3
	cur_mode_n = mode_number;
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <set_active_mode+0x90>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	7013      	strb	r3, [r2, #0]
	if (modes[cur_mode_n].light_states_count > 0) led_functions[modes[cur_mode_n].states[state.state[cur_mode_n]].color](true);
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <set_active_mode+0x90>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <set_active_mode+0x98>)
 80008d8:	460b      	mov	r3, r1
 80008da:	011b      	lsls	r3, r3, #4
 80008dc:	440b      	add	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d017      	beq.n	8000918 <set_active_mode+0x88>
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <set_active_mode+0x90>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <set_active_mode+0x90>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <set_active_mode+0x94>)
 80008f6:	5c9b      	ldrb	r3, [r3, r2]
 80008f8:	490b      	ldr	r1, [pc, #44]	; (8000928 <set_active_mode+0x98>)
 80008fa:	00da      	lsls	r2, r3, #3
 80008fc:	4603      	mov	r3, r0
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	4403      	add	r3, r0
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	440b      	add	r3, r1
 8000908:	3304      	adds	r3, #4
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <set_active_mode+0x9c>)
 8000910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000914:	2001      	movs	r0, #1
 8000916:	4798      	blx	r3
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000001 	.word	0x20000001
 8000924:	200002b8 	.word	0x200002b8
 8000928:	20000004 	.word	0x20000004
 800092c:	08004798 	.word	0x08004798

08000930 <handle_set_command>:

bool handle_set_command() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	const char * const mode_idx_str = cmd + 4;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <handle_set_command+0x4c>)
 8000938:	607b      	str	r3, [r7, #4]
	uint32_t mode_idx;
	if ((sscanf(mode_idx_str, "%lu", &mode_idx) != 1) || (mode_idx < 1 || mode_idx > MODES_COUNT)) return false;
 800093a:	463b      	mov	r3, r7
 800093c:	461a      	mov	r2, r3
 800093e:	4910      	ldr	r1, [pc, #64]	; (8000980 <handle_set_command+0x50>)
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f002 fda5 	bl	8003490 <siscanf>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d108      	bne.n	800095e <handle_set_command+0x2e>
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d005      	beq.n	800095e <handle_set_command+0x2e>
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <handle_set_command+0x54>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d201      	bcs.n	8000962 <handle_set_command+0x32>
 800095e:	2300      	movs	r3, #0
 8000960:	e007      	b.n	8000972 <handle_set_command+0x42>
	set_active_mode(mode_idx - 1);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	3b01      	subs	r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff90 	bl	8000890 <set_active_mode>
	return true;
 8000970:	2301      	movs	r3, #1
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000738 	.word	0x20000738
 8000980:	080046cc 	.word	0x080046cc
 8000984:	20000003 	.word	0x20000003

08000988 <handle_new_command>:

bool handle_new_command() {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
	const char* const pattern = cmd + 4; // set pointer after 'new '
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <handle_new_command+0xf4>)
 8000990:	60bb      	str	r3, [r7, #8]
	const uint32_t pattern_length = strlen(pattern);
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	f7ff fc36 	bl	8000204 <strlen>
 8000998:	6078      	str	r0, [r7, #4]
	if (pattern_length < 2 || pattern_length > 8) return false;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d902      	bls.n	80009a6 <handle_new_command+0x1e>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d901      	bls.n	80009aa <handle_new_command+0x22>
 80009a6:	2300      	movs	r3, #0
 80009a8:	e064      	b.n	8000a74 <handle_new_command+0xec>
	new_mode.light_states_count = pattern_length;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <handle_new_command+0xf8>)
 80009b0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < pattern_length; ++i)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e050      	b.n	8000a5a <handle_new_command+0xd2>
		switch (pattern[i]) {
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3b67      	subs	r3, #103	; 0x67
 80009c2:	2b12      	cmp	r3, #18
 80009c4:	d844      	bhi.n	8000a50 <handle_new_command+0xc8>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <handle_new_command+0x44>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	08000a35 	.word	0x08000a35
 80009d0:	08000a51 	.word	0x08000a51
 80009d4:	08000a51 	.word	0x08000a51
 80009d8:	08000a51 	.word	0x08000a51
 80009dc:	08000a51 	.word	0x08000a51
 80009e0:	08000a51 	.word	0x08000a51
 80009e4:	08000a51 	.word	0x08000a51
 80009e8:	08000a19 	.word	0x08000a19
 80009ec:	08000a51 	.word	0x08000a51
 80009f0:	08000a51 	.word	0x08000a51
 80009f4:	08000a51 	.word	0x08000a51
 80009f8:	08000a27 	.word	0x08000a27
 80009fc:	08000a51 	.word	0x08000a51
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a51 	.word	0x08000a51
 8000a08:	08000a51 	.word	0x08000a51
 8000a0c:	08000a51 	.word	0x08000a51
 8000a10:	08000a51 	.word	0x08000a51
 8000a14:	08000a43 	.word	0x08000a43
			case 'n':
				new_mode.states[i].color = LED_NO_ONE;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <handle_new_command+0xf8>)
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	4413      	add	r3, r2
 8000a20:	2200      	movs	r2, #0
 8000a22:	711a      	strb	r2, [r3, #4]
				break;
 8000a24:	e016      	b.n	8000a54 <handle_new_command+0xcc>
			case 'r':
				new_mode.states[i].color = LED_RED;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <handle_new_command+0xf8>)
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	2201      	movs	r2, #1
 8000a30:	711a      	strb	r2, [r3, #4]
				break;
 8000a32:	e00f      	b.n	8000a54 <handle_new_command+0xcc>
			case 'g':
				new_mode.states[i].color = LED_GREEN;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <handle_new_command+0xf8>)
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	711a      	strb	r2, [r3, #4]
				break;
 8000a40:	e008      	b.n	8000a54 <handle_new_command+0xcc>
			case 'y':
				new_mode.states[i].color = LED_YELLOW;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <handle_new_command+0xf8>)
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	4413      	add	r3, r2
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	711a      	strb	r2, [r3, #4]
				break;
 8000a4e:	e001      	b.n	8000a54 <handle_new_command+0xcc>
			default:
				return false;
 8000a50:	2300      	movs	r3, #0
 8000a52:	e00f      	b.n	8000a74 <handle_new_command+0xec>
	for (uint8_t i = 0; i < pattern_length; ++i)
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	3301      	adds	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d8aa      	bhi.n	80009b8 <handle_new_command+0x30>
		}
	remaining_timeouts_input = pattern_length;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <handle_new_command+0xfc>)
 8000a68:	701a      	strb	r2, [r3, #0]
	print_format("print %d light on timeout in millis:\r\n", pattern_length);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <handle_new_command+0x100>)
 8000a6e:	f7ff feb9 	bl	80007e4 <print_format>
	return true;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000738 	.word	0x20000738
 8000a80:	200006f0 	.word	0x200006f0
 8000a84:	200002b6 	.word	0x200002b6
 8000a88:	080046d0 	.word	0x080046d0

08000a8c <handle_new_command_timeout>:

bool handle_new_command_timeout() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	const uint8_t state_idx = new_mode.light_states_count - remaining_timeouts_input;
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <handle_new_command_timeout+0xcc>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <handle_new_command_timeout+0xd0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	71fb      	strb	r3, [r7, #7]
	if (sscanf(cmd, "%lu", &(new_mode.states[state_idx].timeout)) != 1) return false;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <handle_new_command_timeout+0xcc>)
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	492d      	ldr	r1, [pc, #180]	; (8000b60 <handle_new_command_timeout+0xd4>)
 8000aac:	482d      	ldr	r0, [pc, #180]	; (8000b64 <handle_new_command_timeout+0xd8>)
 8000aae:	f002 fcef 	bl	8003490 <siscanf>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d001      	beq.n	8000abc <handle_new_command_timeout+0x30>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e049      	b.n	8000b50 <handle_new_command_timeout+0xc4>
	--remaining_timeouts_input;
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <handle_new_command_timeout+0xd0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <handle_new_command_timeout+0xd0>)
 8000ac6:	701a      	strb	r2, [r3, #0]
	if (remaining_timeouts_input == 0) {
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <handle_new_command_timeout+0xd0>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d138      	bne.n	8000b42 <handle_new_command_timeout+0xb6>
		const uint8_t available_mode_idxs = sizeof(modes) / sizeof(*(modes)) - MODES_COUNT;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <handle_new_command_timeout+0xdc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	f1c3 0308 	rsb	r3, r3, #8
 8000ad8:	71bb      	strb	r3, [r7, #6]
		const uint8_t mode_idx = MODES_COUNT + (prev_mode_n - MODES_COUNT + 1) % available_mode_idxs;
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <handle_new_command_timeout+0xe0>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <handle_new_command_timeout+0xdc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	79ba      	ldrb	r2, [r7, #6]
 8000aea:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aee:	fb02 f201 	mul.w	r2, r2, r1
 8000af2:	1a9b      	subs	r3, r3, r2
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <handle_new_command_timeout+0xdc>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	717b      	strb	r3, [r7, #5]
		if (MODES_COUNT <= mode_idx) MODES_COUNT = mode_idx + 1;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <handle_new_command_timeout+0xdc>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	797a      	ldrb	r2, [r7, #5]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d304      	bcc.n	8000b12 <handle_new_command_timeout+0x86>
 8000b08:	797b      	ldrb	r3, [r7, #5]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <handle_new_command_timeout+0xdc>)
 8000b10:	701a      	strb	r2, [r3, #0]
		prev_mode_n = mode_idx;
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <handle_new_command_timeout+0xe0>)
 8000b14:	797b      	ldrb	r3, [r7, #5]
 8000b16:	7013      	strb	r3, [r2, #0]
		memcpy(modes + mode_idx, &(new_mode), sizeof(new_mode));
 8000b18:	797a      	ldrb	r2, [r7, #5]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	4413      	add	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <handle_new_command_timeout+0xe4>)
 8000b26:	4413      	add	r3, r2
 8000b28:	2244      	movs	r2, #68	; 0x44
 8000b2a:	490b      	ldr	r1, [pc, #44]	; (8000b58 <handle_new_command_timeout+0xcc>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fc99 	bl	8003464 <memcpy>
		print_format("Written in mode %d\r\n", mode_idx + 1);
 8000b32:	797b      	ldrb	r3, [r7, #5]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	480e      	ldr	r0, [pc, #56]	; (8000b74 <handle_new_command_timeout+0xe8>)
 8000b3a:	f7ff fe53 	bl	80007e4 <print_format>
		return true;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e006      	b.n	8000b50 <handle_new_command_timeout+0xc4>
	}
	print_format("%d timeouts remaining:\r\n", remaining_timeouts_input);
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <handle_new_command_timeout+0xd0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <handle_new_command_timeout+0xec>)
 8000b4a:	f7ff fe4b 	bl	80007e4 <print_format>
	return true;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200006f0 	.word	0x200006f0
 8000b5c:	200002b6 	.word	0x200002b6
 8000b60:	080046cc 	.word	0x080046cc
 8000b64:	20000734 	.word	0x20000734
 8000b68:	20000003 	.word	0x20000003
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000004 	.word	0x20000004
 8000b74:	080046f8 	.word	0x080046f8
 8000b78:	08004710 	.word	0x08004710

08000b7c <handle_command_line>:

void handle_command_line() {
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af06      	add	r7, sp, #24
	bool cmd_exec_stat = false;
 8000b82:	2300      	movs	r3, #0
 8000b84:	71fb      	strb	r3, [r7, #7]
	if (strlen(cmd) != 0) {
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <handle_command_line+0xd0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d05b      	beq.n	8000c46 <handle_command_line+0xca>
		if (string_equals("set interrupts on", cmd)) {
 8000b8e:	492f      	ldr	r1, [pc, #188]	; (8000c4c <handle_command_line+0xd0>)
 8000b90:	482f      	ldr	r0, [pc, #188]	; (8000c50 <handle_command_line+0xd4>)
 8000b92:	f7ff fe51 	bl	8000838 <string_equals>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <handle_command_line+0x2c>
			use_interrupt = true;
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <handle_command_line+0xd8>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
			cmd_exec_stat = true;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e045      	b.n	8000c34 <handle_command_line+0xb8>
		}
		else if (string_equals("set interrupts off", cmd)) {
 8000ba8:	4928      	ldr	r1, [pc, #160]	; (8000c4c <handle_command_line+0xd0>)
 8000baa:	482b      	ldr	r0, [pc, #172]	; (8000c58 <handle_command_line+0xdc>)
 8000bac:	f7ff fe44 	bl	8000838 <string_equals>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d005      	beq.n	8000bc2 <handle_command_line+0x46>
			use_interrupt = false;
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <handle_command_line+0xd8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
			cmd_exec_stat = true;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	e038      	b.n	8000c34 <handle_command_line+0xb8>
		}
		else if (starts_with("set ", cmd)) cmd_exec_stat = handle_set_command(state);
 8000bc2:	4922      	ldr	r1, [pc, #136]	; (8000c4c <handle_command_line+0xd0>)
 8000bc4:	4825      	ldr	r0, [pc, #148]	; (8000c5c <handle_command_line+0xe0>)
 8000bc6:	f7ff fe4a 	bl	800085e <starts_with>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d010      	beq.n	8000bf2 <handle_command_line+0x76>
 8000bd0:	4e23      	ldr	r6, [pc, #140]	; (8000c60 <handle_command_line+0xe4>)
 8000bd2:	466d      	mov	r5, sp
 8000bd4:	f106 0410 	add.w	r4, r6, #16
 8000bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000be4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000be8:	f7ff fea2 	bl	8000930 <handle_set_command>
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	e020      	b.n	8000c34 <handle_command_line+0xb8>
		else if (starts_with("new ", cmd)) {
 8000bf2:	4916      	ldr	r1, [pc, #88]	; (8000c4c <handle_command_line+0xd0>)
 8000bf4:	481b      	ldr	r0, [pc, #108]	; (8000c64 <handle_command_line+0xe8>)
 8000bf6:	f7ff fe32 	bl	800085e <starts_with>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00e      	beq.n	8000c1e <handle_command_line+0xa2>
			handle_new_command(state);
 8000c00:	4e17      	ldr	r6, [pc, #92]	; (8000c60 <handle_command_line+0xe4>)
 8000c02:	466d      	mov	r5, sp
 8000c04:	f106 0410 	add.w	r4, r6, #16
 8000c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c10:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c18:	f7ff feb6 	bl	8000988 <handle_new_command>
			return;
 8000c1c:	e013      	b.n	8000c46 <handle_command_line+0xca>
		}
		else if (remaining_timeouts_input > 0) cmd_exec_stat = handle_new_command_timeout();
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <handle_command_line+0xec>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <handle_command_line+0xb4>
 8000c26:	f7ff ff31 	bl	8000a8c <handle_new_command_timeout>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e001      	b.n	8000c34 <handle_command_line+0xb8>
		else cmd_exec_stat = false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
		println((cmd_exec_stat) ? OK_MSG : "bad command");
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <handle_command_line+0xc2>
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <handle_command_line+0xf0>)
 8000c3c:	e000      	b.n	8000c40 <handle_command_line+0xc4>
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <handle_command_line+0xf4>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdbf 	bl	80007c4 <println>
	}
}
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	20000734 	.word	0x20000734
 8000c50:	0800472c 	.word	0x0800472c
 8000c54:	200002b5 	.word	0x200002b5
 8000c58:	08004740 	.word	0x08004740
 8000c5c:	08004754 	.word	0x08004754
 8000c60:	200002b8 	.word	0x200002b8
 8000c64:	0800475c 	.word	0x0800475c
 8000c68:	200002b6 	.word	0x200002b6
 8000c6c:	08004794 	.word	0x08004794
 8000c70:	08004764 	.word	0x08004764

08000c74 <readln>:

void readln() {
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af06      	add	r7, sp, #24
    if (use_interrupt) {
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <readln+0xe8>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00c      	beq.n	8000c9c <readln+0x28>
        if (!is_char_received) {
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <readln+0xec>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	f083 0301 	eor.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00e      	beq.n	8000cae <readln+0x3a>
            HAL_UART_Receive_IT(&huart6, (void *) &last_received_char, sizeof(last_received_char));
 8000c90:	2201      	movs	r2, #1
 8000c92:	4934      	ldr	r1, [pc, #208]	; (8000d64 <readln+0xf0>)
 8000c94:	4834      	ldr	r0, [pc, #208]	; (8000d68 <readln+0xf4>)
 8000c96:	f001 fcdd 	bl	8002654 <HAL_UART_Receive_IT>
            return;
 8000c9a:	e05b      	b.n	8000d54 <readln+0xe0>
        }
    } else if (HAL_UART_Receive(&huart6, (void *) &last_received_char, sizeof(last_received_char), UART_TIMEOUT) != HAL_OK) return;
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4930      	ldr	r1, [pc, #192]	; (8000d64 <readln+0xf0>)
 8000ca2:	4831      	ldr	r0, [pc, #196]	; (8000d68 <readln+0xf4>)
 8000ca4:	f001 fbef 	bl	8002486 <HAL_UART_Receive>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d14f      	bne.n	8000d4e <readln+0xda>
	is_char_received = false;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <readln+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
    print(&last_received_char);
 8000cb4:	482b      	ldr	r0, [pc, #172]	; (8000d64 <readln+0xf0>)
 8000cb6:	f7ff fd53 	bl	8000760 <print>
    switch (last_received_char) {
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <readln+0xf0>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc0:	d006      	beq.n	8000cd0 <readln+0x5c>
 8000cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc4:	dc2a      	bgt.n	8000d1c <readln+0xa8>
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d002      	beq.n	8000cd0 <readln+0x5c>
 8000cca:	2b0d      	cmp	r3, #13
 8000ccc:	d00e      	beq.n	8000cec <readln+0x78>
 8000cce:	e025      	b.n	8000d1c <readln+0xa8>
    	case '\b':
    	case 0x7F: {
    	    const uint8_t cmd_len = strlen(cmd);
 8000cd0:	4826      	ldr	r0, [pc, #152]	; (8000d6c <readln+0xf8>)
 8000cd2:	f7ff fa97 	bl	8000204 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    	    if (cmd_len > 0) cmd[cmd_len - 1] = '\0';
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d038      	beq.n	8000d52 <readln+0xde>
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <readln+0xf8>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	54d1      	strb	r1, [r2, r3]
    		return;
 8000cea:	e032      	b.n	8000d52 <readln+0xde>
    	}
    	case '\r':
    	    println("\n");
 8000cec:	4820      	ldr	r0, [pc, #128]	; (8000d70 <readln+0xfc>)
 8000cee:	f7ff fd69 	bl	80007c4 <println>
    		handle_command_line(state);
 8000cf2:	4e20      	ldr	r6, [pc, #128]	; (8000d74 <readln+0x100>)
 8000cf4:	466d      	mov	r5, sp
 8000cf6:	f106 0410 	add.w	r4, r6, #16
 8000cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d02:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d06:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d0a:	f7ff ff37 	bl	8000b7c <handle_command_line>
        	memset(cmd, '\0', sizeof(cmd));
 8000d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d12:	2100      	movs	r1, #0
 8000d14:	4815      	ldr	r0, [pc, #84]	; (8000d6c <readln+0xf8>)
 8000d16:	f002 fbb3 	bl	8003480 <memset>
    		return;
 8000d1a:	e01b      	b.n	8000d54 <readln+0xe0>
    }
    const uint32_t command_line_length = strlen(cmd);
 8000d1c:	4813      	ldr	r0, [pc, #76]	; (8000d6c <readln+0xf8>)
 8000d1e:	f7ff fa71 	bl	8000204 <strlen>
 8000d22:	6038      	str	r0, [r7, #0]
    // overflow
    if (command_line_length == sizeof(cmd) - 1) {
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d109      	bne.n	8000d3e <readln+0xca>
    	println("\r\n invalid command");
 8000d2a:	4813      	ldr	r0, [pc, #76]	; (8000d78 <readln+0x104>)
 8000d2c:	f7ff fd4a 	bl	80007c4 <println>
    	memset(cmd, '\0', sizeof(cmd));
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	2100      	movs	r1, #0
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <readln+0xf8>)
 8000d38:	f002 fba2 	bl	8003480 <memset>
    	return;
 8000d3c:	e00a      	b.n	8000d54 <readln+0xe0>
    }
    cmd[command_line_length] = last_received_char;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <readln+0xf0>)
 8000d40:	7819      	ldrb	r1, [r3, #0]
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <readln+0xf8>)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	460a      	mov	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e002      	b.n	8000d54 <readln+0xe0>
    } else if (HAL_UART_Receive(&huart6, (void *) &last_received_char, sizeof(last_received_char), UART_TIMEOUT) != HAL_OK) return;
 8000d4e:	bf00      	nop
 8000d50:	e000      	b.n	8000d54 <readln+0xe0>
    		return;
 8000d52:	bf00      	nop
}
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002b5 	.word	0x200002b5
 8000d60:	200002b4 	.word	0x200002b4
 8000d64:	200006ec 	.word	0x200006ec
 8000d68:	20000834 	.word	0x20000834
 8000d6c:	20000734 	.word	0x20000734
 8000d70:	08004770 	.word	0x08004770
 8000d74:	200002b8 	.word	0x200002b8
 8000d78:	08004774 	.word	0x08004774

08000d7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { is_char_received = true; }
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_UART_RxCpltCallback+0x1c>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200002b4 	.word	0x200002b4

08000d9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) { is_transmitted = true; }
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_UART_TxCpltCallback+0x1c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000002 	.word	0x20000002

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fa45 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f893 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f7ff fbf5 	bl	80005b8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000dce:	f000 f99b 	bl	8001108 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t current_time = HAL_GetTick();
 8000dd2:	f000 faa3 	bl	800131c <HAL_GetTick>
 8000dd6:	60f8      	str	r0, [r7, #12]
    while (1) {
        if (is_btn_clicked()) set_active_mode((cur_mode_n + 1) % MODES_COUNT);
 8000dd8:	f7ff fc94 	bl	8000704 <is_btn_clicked>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00d      	beq.n	8000dfe <main+0x42>
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <main+0x120>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a3d      	ldr	r2, [pc, #244]	; (8000ee0 <main+0x124>)
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	fb93 f1f2 	sdiv	r1, r3, r2
 8000df0:	fb02 f201 	mul.w	r2, r2, r1
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd49 	bl	8000890 <set_active_mode>
        readln();
 8000dfe:	f7ff ff39 	bl	8000c74 <readln>
        state.elapsed_state_time[cur_mode_n] += HAL_GetTick() - current_time;
 8000e02:	f000 fa8b 	bl	800131c <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <main+0x120>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4934      	ldr	r1, [pc, #208]	; (8000ee4 <main+0x128>)
 8000e12:	3302      	adds	r3, #2
 8000e14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e18:	4930      	ldr	r1, [pc, #192]	; (8000edc <main+0x120>)
 8000e1a:	7809      	ldrb	r1, [r1, #0]
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	441a      	add	r2, r3
 8000e20:	4930      	ldr	r1, [pc, #192]	; (8000ee4 <main+0x128>)
 8000e22:	1c83      	adds	r3, r0, #2
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_time = HAL_GetTick();
 8000e28:	f000 fa78 	bl	800131c <HAL_GetTick>
 8000e2c:	60f8      	str	r0, [r7, #12]
        const struct GarlandMode* current_mode = modes + cur_mode_n;
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <main+0x120>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4613      	mov	r3, r2
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <main+0x12c>)
 8000e40:	4413      	add	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
        if (current_mode->light_states_count == 0) continue;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d045      	beq.n	8000ed8 <main+0x11c>
        const struct LightState* current_state = current_mode->states + state.state[cur_mode_n];
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1d1a      	adds	r2, r3, #4
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <main+0x120>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <main+0x128>)
 8000e58:	5c5b      	ldrb	r3, [r3, r1]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	607b      	str	r3, [r7, #4]
        if (state.elapsed_state_time[cur_mode_n] >= current_state->timeout) {
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <main+0x120>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <main+0x128>)
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3b1      	bcc.n	8000dd8 <main+0x1c>
            led_functions[current_state->color](false);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <main+0x130>)
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	2000      	movs	r0, #0
 8000e82:	4798      	blx	r3
            state.elapsed_state_time[cur_mode_n] = 0;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <main+0x120>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <main+0x128>)
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            state.state[cur_mode_n] = (state.state[cur_mode_n] + 1) % current_mode->light_states_count;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <main+0x120>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <main+0x128>)
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ea6:	fb02 f201 	mul.w	r2, r2, r1
 8000eaa:	1a99      	subs	r1, r3, r2
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <main+0x120>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	b2c9      	uxtb	r1, r1
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <main+0x128>)
 8000eb6:	5499      	strb	r1, [r3, r2]
            led_functions[current_mode->states[state.state[cur_mode_n]].color](true);
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <main+0x120>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <main+0x128>)
 8000ec0:	5c9b      	ldrb	r3, [r3, r2]
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <main+0x130>)
 8000ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	4798      	blx	r3
 8000ed6:	e77f      	b.n	8000dd8 <main+0x1c>
        if (current_mode->light_states_count == 0) continue;
 8000ed8:	bf00      	nop
    while (1) {
 8000eda:	e77d      	b.n	8000dd8 <main+0x1c>
 8000edc:	20000001 	.word	0x20000001
 8000ee0:	20000003 	.word	0x20000003
 8000ee4:	200002b8 	.word	0x200002b8
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	08004798 	.word	0x08004798

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2230      	movs	r2, #48	; 0x30
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fabe 	bl	8003480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <SystemClock_Config+0xb8>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <SystemClock_Config+0xb8>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <SystemClock_Config+0xb8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <SystemClock_Config+0xbc>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <SystemClock_Config+0xbc>)
 8000f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <SystemClock_Config+0xbc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fd67 	bl	8001a38 <HAL_RCC_OscConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f70:	f000 f81e 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f74:	230f      	movs	r3, #15
 8000f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 ffca 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f9a:	f000 f809 	bl	8000fb0 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_MspInit+0x4c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <HAL_MspInit+0x4c>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x4c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f94a 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <USART6_IRQHandler+0x10>)
 800106a:	f001 fb23 	bl	80026b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000834 	.word	0x20000834

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f002 f9b2 	bl	8003410 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20030000 	.word	0x20030000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	200006e0 	.word	0x200006e0
 80010e0:	20000890 	.word	0x20000890

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_USART6_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USART6_UART_Init+0x4c>)
 8001140:	f001 f8c2 	bl	80022c8 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f7ff ff31 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000834 	.word	0x20000834
 8001158:	40011400 	.word	0x40011400

0800115c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <HAL_UART_MspInit+0x94>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d133      	bne.n	80011e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_UART_MspInit+0x98>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0x98>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0x98>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0x98>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_UART_MspInit+0x98>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_UART_MspInit+0x98>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b6:	23c0      	movs	r3, #192	; 0xc0
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011c6:	2308      	movs	r3, #8
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 80011d2:	f000 fa53 	bl	800167c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2047      	movs	r0, #71	; 0x47
 80011dc:	f000 f985 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011e0:	2047      	movs	r0, #71	; 0x47
 80011e2:	f000 f99e 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40011400 	.word	0x40011400
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020800 	.word	0x40020800

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001226:	f7ff ff5d 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f002 f8f7 	bl	800341c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff fdc5 	bl	8000dbc <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8001240:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 8001244:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8001248:	2000088c 	.word	0x2000088c

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f92b 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fe9c 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f943 	bl	800153e <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d0:	f000 f90b 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000224 	.word	0x20000224
 80012ec:	2000022c 	.word	0x2000022c
 80012f0:	20000228 	.word	0x20000228

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2000022c 	.word	0x2000022c
 8001318:	20000878 	.word	0x20000878

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000878 	.word	0x20000878

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <__NVIC_EnableIRQ+0x38>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff29 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff3e 	bl	800137c <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff8e 	bl	8001428 <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff31 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff feda 	bl	800131c <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d008      	beq.n	8001588 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2280      	movs	r2, #128	; 0x80
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e052      	b.n	800162e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0216 	bic.w	r2, r2, #22
 8001596:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <HAL_DMA_Abort+0x62>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0208 	bic.w	r2, r2, #8
 80015c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d8:	e013      	b.n	8001602 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015da:	f7ff fe9f 	bl	800131c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	d90c      	bls.n	8001602 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e015      	b.n	800162e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e4      	bne.n	80015da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	223f      	movs	r2, #63	; 0x3f
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d004      	beq.n	8001654 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e00c      	b.n	800166e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2205      	movs	r2, #5
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e177      	b.n	8001988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8166 	bne.w	8001982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d005      	beq.n	80016ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d130      	bne.n	8001730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0201 	and.w	r2, r3, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80c0 	beq.w	8001982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_GPIO_Init+0x324>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_GPIO_Init+0x324>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_GPIO_Init+0x324>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <HAL_GPIO_Init+0x328>)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_GPIO_Init+0x32c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d037      	beq.n	80018ba <HAL_GPIO_Init+0x23e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a57      	ldr	r2, [pc, #348]	; (80019ac <HAL_GPIO_Init+0x330>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d031      	beq.n	80018b6 <HAL_GPIO_Init+0x23a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_GPIO_Init+0x334>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d02b      	beq.n	80018b2 <HAL_GPIO_Init+0x236>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a55      	ldr	r2, [pc, #340]	; (80019b4 <HAL_GPIO_Init+0x338>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x232>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a54      	ldr	r2, [pc, #336]	; (80019b8 <HAL_GPIO_Init+0x33c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x22e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a53      	ldr	r2, [pc, #332]	; (80019bc <HAL_GPIO_Init+0x340>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x22a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_GPIO_Init+0x344>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <HAL_GPIO_Init+0x348>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x222>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a50      	ldr	r2, [pc, #320]	; (80019c8 <HAL_GPIO_Init+0x34c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x21e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x350>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x21a>
 8001892:	2309      	movs	r3, #9
 8001894:	e012      	b.n	80018bc <HAL_GPIO_Init+0x240>
 8001896:	230a      	movs	r3, #10
 8001898:	e010      	b.n	80018bc <HAL_GPIO_Init+0x240>
 800189a:	2308      	movs	r3, #8
 800189c:	e00e      	b.n	80018bc <HAL_GPIO_Init+0x240>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018a2:	2306      	movs	r3, #6
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x240>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4935      	ldr	r1, [pc, #212]	; (80019a4 <HAL_GPIO_Init+0x328>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_GPIO_Init+0x354>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fe:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001928:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_GPIO_Init+0x354>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_GPIO_Init+0x354>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_GPIO_Init+0x354>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_GPIO_Init+0x354>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f ae84 	bls.w	8001698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40022000 	.word	0x40022000
 80019cc:	40022400 	.word	0x40022400
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e264      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d075      	beq.n	8001b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	4ba3      	ldr	r3, [pc, #652]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d00c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a62:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d112      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7a:	d10b      	bne.n	8001a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	4b99      	ldr	r3, [pc, #612]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d05b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x108>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d157      	bne.n	8001b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e23f      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x74>
 8001a9e:	4b91      	ldr	r3, [pc, #580]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a90      	ldr	r2, [pc, #576]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e01d      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x98>
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a87      	ldr	r2, [pc, #540]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xb0>
 8001ad0:	4b84      	ldr	r3, [pc, #528]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a83      	ldr	r2, [pc, #524]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a80      	ldr	r2, [pc, #512]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d013      	beq.n	8001b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc14 	bl	800131c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fc10 	bl	800131c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e204      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0xc0>
 8001b16:	e014      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc00 	bl	800131c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fbfc 	bl	800131c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e1f0      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0xe8>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4e:	4b65      	ldr	r3, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5a:	4b62      	ldr	r3, [pc, #392]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d116      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	4b5c      	ldr	r3, [pc, #368]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e1c4      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b56      	ldr	r3, [pc, #344]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4952      	ldr	r1, [pc, #328]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	e03a      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_RCC_OscConfig+0x2b0>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff fbb5 	bl	800131c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fbb1 	bl	800131c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1a5      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4940      	ldr	r1, [pc, #256]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bea:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0x2b0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb94 	bl	800131c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fb90 	bl	800131c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e184      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d030      	beq.n	8001c84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x2b4>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff fb74 	bl	800131c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fb70 	bl	800131c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e164      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x200>
 8001c56:	e015      	b.n	8001c84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x2b4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff fb5d 	bl	800131c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c66:	f7ff fb59 	bl	800131c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e14d      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a0 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x2b8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d121      	bne.n	8001d12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_RCC_OscConfig+0x2b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_RCC_OscConfig+0x2b8>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb1f 	bl	800131c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e011      	b.n	8001d06 <HAL_RCC_OscConfig+0x2ce>
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	42470000 	.word	0x42470000
 8001cec:	42470e80 	.word	0x42470e80
 8001cf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7ff fb12 	bl	800131c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e106      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b85      	ldr	r3, [pc, #532]	; (8001f1c <HAL_RCC_OscConfig+0x4e4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2f0>
 8001d1a:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a80      	ldr	r2, [pc, #512]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	e01c      	b.n	8001d62 <HAL_RCC_OscConfig+0x32a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x312>
 8001d30:	4b7b      	ldr	r3, [pc, #492]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	4a7a      	ldr	r2, [pc, #488]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3c:	4b78      	ldr	r3, [pc, #480]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a77      	ldr	r2, [pc, #476]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	e00b      	b.n	8001d62 <HAL_RCC_OscConfig+0x32a>
 8001d4a:	4b75      	ldr	r3, [pc, #468]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a74      	ldr	r2, [pc, #464]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	4b72      	ldr	r3, [pc, #456]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fad7 	bl	800131c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7ff fad3 	bl	800131c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0c5      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ee      	beq.n	8001d72 <HAL_RCC_OscConfig+0x33a>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fac1 	bl	800131c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fabd 	bl	800131c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0af      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 809b 	beq.w	8001f12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d05c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d141      	bne.n	8001e74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_RCC_OscConfig+0x4ec>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff fa91 	bl	800131c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff fa8d 	bl	800131c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e081      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e10:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	019b      	lsls	r3, r3, #6
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	3b01      	subs	r3, #1
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	061b      	lsls	r3, r3, #24
 8001e40:	4937      	ldr	r1, [pc, #220]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_RCC_OscConfig+0x4ec>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fa66 	bl	800131c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff fa62 	bl	800131c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e056      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x41c>
 8001e72:	e04e      	b.n	8001f12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_OscConfig+0x4ec>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fa4f 	bl	800131c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff fa4b 	bl	800131c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e03f      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x44a>
 8001ea0:	e037      	b.n	8001f12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e032      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d028      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d121      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d11a      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ee4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d111      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	42470060 	.word	0x42470060

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0cc      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d044      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e067      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4934      	ldr	r1, [pc, #208]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7ff f980 	bl	800131c <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff f97c 	bl	800131c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20c      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f8e0 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	080047a8 	.word	0x080047a8
 80020ec:	20000224 	.word	0x20000224
 80020f0:	20000228 	.word	0x20000228

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b5b0      	push	{r4, r5, r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020fa:	2100      	movs	r1, #0
 80020fc:	6079      	str	r1, [r7, #4]
 80020fe:	2100      	movs	r1, #0
 8002100:	60f9      	str	r1, [r7, #12]
 8002102:	2100      	movs	r1, #0
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002106:	2100      	movs	r1, #0
 8002108:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210a:	4952      	ldr	r1, [pc, #328]	; (8002254 <HAL_RCC_GetSysClockFreq+0x160>)
 800210c:	6889      	ldr	r1, [r1, #8]
 800210e:	f001 010c 	and.w	r1, r1, #12
 8002112:	2908      	cmp	r1, #8
 8002114:	d00d      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x3e>
 8002116:	2908      	cmp	r1, #8
 8002118:	f200 8094 	bhi.w	8002244 <HAL_RCC_GetSysClockFreq+0x150>
 800211c:	2900      	cmp	r1, #0
 800211e:	d002      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x32>
 8002120:	2904      	cmp	r1, #4
 8002122:	d003      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x38>
 8002124:	e08e      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002126:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_RCC_GetSysClockFreq+0x164>)
 8002128:	60bb      	str	r3, [r7, #8]
       break;
 800212a:	e08e      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_RCC_GetSysClockFreq+0x168>)
 800212e:	60bb      	str	r3, [r7, #8]
      break;
 8002130:	e08b      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002132:	4948      	ldr	r1, [pc, #288]	; (8002254 <HAL_RCC_GetSysClockFreq+0x160>)
 8002134:	6849      	ldr	r1, [r1, #4]
 8002136:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800213a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213c:	4945      	ldr	r1, [pc, #276]	; (8002254 <HAL_RCC_GetSysClockFreq+0x160>)
 800213e:	6849      	ldr	r1, [r1, #4]
 8002140:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002144:	2900      	cmp	r1, #0
 8002146:	d024      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4942      	ldr	r1, [pc, #264]	; (8002254 <HAL_RCC_GetSysClockFreq+0x160>)
 800214a:	6849      	ldr	r1, [r1, #4]
 800214c:	0989      	lsrs	r1, r1, #6
 800214e:	4608      	mov	r0, r1
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002158:	f04f 0500 	mov.w	r5, #0
 800215c:	ea00 0204 	and.w	r2, r0, r4
 8002160:	ea01 0305 	and.w	r3, r1, r5
 8002164:	493d      	ldr	r1, [pc, #244]	; (800225c <HAL_RCC_GetSysClockFreq+0x168>)
 8002166:	fb01 f003 	mul.w	r0, r1, r3
 800216a:	2100      	movs	r1, #0
 800216c:	fb01 f102 	mul.w	r1, r1, r2
 8002170:	1844      	adds	r4, r0, r1
 8002172:	493a      	ldr	r1, [pc, #232]	; (800225c <HAL_RCC_GetSysClockFreq+0x168>)
 8002174:	fba2 0101 	umull	r0, r1, r2, r1
 8002178:	1863      	adds	r3, r4, r1
 800217a:	4619      	mov	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f7fe f89c 	bl	80002c0 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4613      	mov	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e04a      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCC_GetSysClockFreq+0x160>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	461a      	mov	r2, r3
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	ea02 0400 	and.w	r4, r2, r0
 80021aa:	ea03 0501 	and.w	r5, r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	014b      	lsls	r3, r1, #5
 80021bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c0:	0142      	lsls	r2, r0, #5
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	1b00      	subs	r0, r0, r4
 80021c8:	eb61 0105 	sbc.w	r1, r1, r5
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	018b      	lsls	r3, r1, #6
 80021d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021da:	0182      	lsls	r2, r0, #6
 80021dc:	1a12      	subs	r2, r2, r0
 80021de:	eb63 0301 	sbc.w	r3, r3, r1
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f04f 0100 	mov.w	r1, #0
 80021ea:	00d9      	lsls	r1, r3, #3
 80021ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f0:	00d0      	lsls	r0, r2, #3
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	1912      	adds	r2, r2, r4
 80021f8:	eb45 0303 	adc.w	r3, r5, r3
 80021fc:	f04f 0000 	mov.w	r0, #0
 8002200:	f04f 0100 	mov.w	r1, #0
 8002204:	0299      	lsls	r1, r3, #10
 8002206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800220a:	0290      	lsls	r0, r2, #10
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	461a      	mov	r2, r3
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f7fe f850 	bl	80002c0 <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4613      	mov	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_RCC_GetSysClockFreq+0x160>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	3301      	adds	r3, #1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	60bb      	str	r3, [r7, #8]
      break;
 8002242:	e002      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_RCC_GetSysClockFreq+0x164>)
 8002246:	60bb      	str	r3, [r7, #8]
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	68bb      	ldr	r3, [r7, #8]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	00f42400 	.word	0x00f42400
 800225c:	017d7840 	.word	0x017d7840

08002260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000224 	.word	0x20000224

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800227c:	f7ff fff0 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0a9b      	lsrs	r3, r3, #10
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	080047b8 	.word	0x080047b8

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a4:	f7ff ffdc 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	0b5b      	lsrs	r3, r3, #13
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4903      	ldr	r1, [pc, #12]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	080047b8 	.word	0x080047b8

080022c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e03f      	b.n	800235a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe ff34 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2224      	movs	r2, #36	; 0x24
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800230a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 feb7 	bl	8003080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b08a      	sub	sp, #40	; 0x28
 8002366:	af02      	add	r7, sp, #8
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	d17c      	bne.n	800247c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_UART_Transmit+0x2c>
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e075      	b.n	800247e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_UART_Transmit+0x3e>
 800239c:	2302      	movs	r3, #2
 800239e:	e06e      	b.n	800247e <HAL_UART_Transmit+0x11c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2221      	movs	r2, #33	; 0x21
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b6:	f7fe ffb1 	bl	800131c <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	88fa      	ldrh	r2, [r7, #6]
 80023c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d0:	d108      	bne.n	80023e4 <HAL_UART_Transmit+0x82>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	e003      	b.n	80023ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023f4:	e02a      	b.n	800244c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fbfb 	bl	8002bfc <UART_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e036      	b.n	800247e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	3302      	adds	r3, #2
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e007      	b.n	800243e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1cf      	bne.n	80023f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fbcb 	bl	8002bfc <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e006      	b.n	800247e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	e000      	b.n	800247e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800247c:	2302      	movs	r3, #2
  }
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b08a      	sub	sp, #40	; 0x28
 800248a:	af02      	add	r7, sp, #8
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	f040 808c 	bne.w	80025c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_UART_Receive+0x2e>
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e084      	b.n	80025c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Receive+0x40>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e07d      	b.n	80025c2 <HAL_UART_Receive+0x13c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2222      	movs	r2, #34	; 0x22
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e2:	f7fe ff1b 	bl	800131c <HAL_GetTick>
 80024e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	88fa      	ldrh	r2, [r7, #6]
 80024ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	88fa      	ldrh	r2, [r7, #6]
 80024f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fc:	d108      	bne.n	8002510 <HAL_UART_Receive+0x8a>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e003      	b.n	8002518 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002520:	e043      	b.n	80025aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	2120      	movs	r1, #32
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fb65 	bl	8002bfc <UART_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e042      	b.n	80025c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	b29b      	uxth	r3, r3
 800254a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254e:	b29a      	uxth	r2, r3
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	3302      	adds	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e01f      	b.n	800259c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d007      	beq.n	8002576 <HAL_UART_Receive+0xf0>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <HAL_UART_Receive+0xfe>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e008      	b.n	8002596 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002590:	b2da      	uxtb	r2, r3
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1b6      	bne.n	8002522 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d130      	bne.n	8002646 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Transmit_IT+0x26>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e029      	b.n	8002648 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Transmit_IT+0x38>
 80025fe:	2302      	movs	r3, #2
 8002600:	e022      	b.n	8002648 <HAL_UART_Transmit_IT+0x7e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	88fa      	ldrh	r2, [r7, #6]
 8002614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2221      	movs	r2, #33	; 0x21
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002640:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	d11d      	bne.n	80026aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_UART_Receive_IT+0x26>
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e016      	b.n	80026ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_UART_Receive_IT+0x38>
 8002688:	2302      	movs	r3, #2
 800268a:	e00f      	b.n	80026ac <HAL_UART_Receive_IT+0x58>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	461a      	mov	r2, r3
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fb19 	bl	8002cd8 <UART_Start_Receive_IT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e000      	b.n	80026ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0ba      	sub	sp, #232	; 0xe8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_UART_IRQHandler+0x66>
 8002706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fbf9 	bl	8002f0a <UART_Receive_IT>
      return;
 8002718:	e256      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800271a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80de 	beq.w	80028e0 <HAL_UART_IRQHandler+0x22c>
 8002724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002734:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80d1 	beq.w	80028e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xae>
 800274a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_UART_IRQHandler+0xd2>
 800276e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_UART_IRQHandler+0xf6>
 8002792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_UART_IRQHandler+0x126>
 80027b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0208 	orr.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 81ed 	beq.w	8002bbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_UART_IRQHandler+0x14e>
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb84 	bl	8002f0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_UART_IRQHandler+0x17a>
 8002826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d04f      	beq.n	80028ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa8c 	bl	8002d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d141      	bne.n	80028c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800285c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3314      	adds	r3, #20
 800286a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800286e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800287a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1d9      	bne.n	8002842 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	4a7d      	ldr	r2, [pc, #500]	; (8002a90 <HAL_UART_IRQHandler+0x3dc>)
 800289c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fec7 	bl	8001636 <HAL_DMA_Abort_IT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	e00e      	b.n	80028dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f986 	bl	8002bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	e00a      	b.n	80028dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f982 	bl	8002bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	e006      	b.n	80028dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f97e 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028da:	e170      	b.n	8002bbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	bf00      	nop
    return;
 80028de:	e16e      	b.n	8002bbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f040 814a 	bne.w	8002b7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8143 	beq.w	8002b7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 813c 	beq.w	8002b7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	f040 80b4 	bne.w	8002a94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8140 	beq.w	8002bc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800294a:	429a      	cmp	r2, r3
 800294c:	f080 8139 	bcs.w	8002bc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002956:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002962:	f000 8088 	beq.w	8002a76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800297c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800299e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1d9      	bne.n	8002966 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3314      	adds	r3, #20
 80029b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3314      	adds	r3, #20
 80029d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e1      	bne.n	80029b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a1a:	e841 2300 	strex	r3, r2, [r1]
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e3      	bne.n	80029ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a46:	f023 0310 	bic.w	r3, r3, #16
 8002a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a58:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a60:	e841 2300 	strex	r3, r2, [r1]
 8002a64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e3      	bne.n	8002a34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fd70 	bl	8001556 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8ac 	bl	8002be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a8c:	e099      	b.n	8002bc2 <HAL_UART_IRQHandler+0x50e>
 8002a8e:	bf00      	nop
 8002a90:	08002e13 	.word	0x08002e13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 808b 	beq.w	8002bc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8086 	beq.w	8002bc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ade:	647a      	str	r2, [r7, #68]	; 0x44
 8002ae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e3      	bne.n	8002aba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3314      	adds	r3, #20
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	623b      	str	r3, [r7, #32]
   return(result);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3314      	adds	r3, #20
 8002b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b16:	633a      	str	r2, [r7, #48]	; 0x30
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e3      	bne.n	8002af2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	e853 3f00 	ldrex	r3, [r3]
 8002b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0310 	bic.w	r3, r3, #16
 8002b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b5c:	61fa      	str	r2, [r7, #28]
 8002b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b60:	69b9      	ldr	r1, [r7, #24]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	e841 2300 	strex	r3, r2, [r1]
 8002b68:	617b      	str	r3, [r7, #20]
   return(result);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e3      	bne.n	8002b38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f834 	bl	8002be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b7c:	e023      	b.n	8002bc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_UART_IRQHandler+0x4ea>
 8002b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f94f 	bl	8002e3a <UART_Transmit_IT>
    return;
 8002b9c:	e014      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x514>
 8002baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f98f 	bl	8002eda <UART_EndTransmit_IT>
    return;
 8002bbc:	e004      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
    return;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
      return;
 8002bc6:	bf00      	nop
  }
}
 8002bc8:	37e8      	adds	r7, #232	; 0xe8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop

08002bd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b090      	sub	sp, #64	; 0x40
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0c:	e050      	b.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c14:	d04c      	beq.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c1c:	f7fe fb7e 	bl	800131c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d241      	bcs.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c4c:	637a      	str	r2, [r7, #52]	; 0x34
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c80:	623a      	str	r2, [r7, #32]
 8002c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	69f9      	ldr	r1, [r7, #28]
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e5      	bne.n	8002c60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00f      	b.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d09f      	beq.n	8002c0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3740      	adds	r7, #64	; 0x40
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	88fa      	ldrh	r2, [r7, #6]
 8002cf0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	88fa      	ldrh	r2, [r7, #6]
 8002cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2222      	movs	r2, #34	; 0x22
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b095      	sub	sp, #84	; 0x54
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d74:	643a      	str	r2, [r7, #64]	; 0x40
 8002d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e5      	bne.n	8002d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3314      	adds	r3, #20
 8002da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db0:	e841 2300 	strex	r3, r2, [r1]
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e5      	bne.n	8002d88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d119      	bne.n	8002df8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f023 0310 	bic.w	r3, r3, #16
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de4:	61ba      	str	r2, [r7, #24]
 8002de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	613b      	str	r3, [r7, #16]
   return(result);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e06:	bf00      	nop
 8002e08:	3754      	adds	r7, #84	; 0x54
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff fecf 	bl	8002bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b21      	cmp	r3, #33	; 0x21
 8002e4c:	d13e      	bne.n	8002ecc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e56:	d114      	bne.n	8002e82 <UART_Transmit_IT+0x48>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d110      	bne.n	8002e82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	1c9a      	adds	r2, r3, #2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	621a      	str	r2, [r3, #32]
 8002e80:	e008      	b.n	8002e94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	1c59      	adds	r1, r3, #1
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6211      	str	r1, [r2, #32]
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd ff4e 	bl	8000d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b08c      	sub	sp, #48	; 0x30
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b22      	cmp	r3, #34	; 0x22
 8002f1c:	f040 80ab 	bne.w	8003076 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d117      	bne.n	8002f5a <UART_Receive_IT+0x50>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d113      	bne.n	8002f5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	1c9a      	adds	r2, r3, #2
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
 8002f58:	e026      	b.n	8002fa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	d007      	beq.n	8002f7e <UART_Receive_IT+0x74>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <UART_Receive_IT+0x82>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e008      	b.n	8002f9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d15a      	bne.n	8003072 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0220 	bic.w	r2, r2, #32
 8002fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d135      	bne.n	8003068 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	613b      	str	r3, [r7, #16]
   return(result);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f023 0310 	bic.w	r3, r3, #16
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	623a      	str	r2, [r7, #32]
 8003024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e5      	bne.n	8003002 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b10      	cmp	r3, #16
 8003042:	d10a      	bne.n	800305a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fdbf 	bl	8002be4 <HAL_UARTEx_RxEventCallback>
 8003066:	e002      	b.n	800306e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd fe87 	bl	8000d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e002      	b.n	8003078 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3730      	adds	r7, #48	; 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003084:	b09f      	sub	sp, #124	; 0x7c
 8003086:	af00      	add	r7, sp, #0
 8003088:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003096:	68d9      	ldr	r1, [r3, #12]
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	ea40 0301 	orr.w	r3, r0, r1
 80030a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030c4:	f021 010c 	bic.w	r1, r1, #12
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ce:	430b      	orrs	r3, r1
 80030d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	6999      	ldr	r1, [r3, #24]
 80030e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	ea40 0301 	orr.w	r3, r0, r1
 80030e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4bc5      	ldr	r3, [pc, #788]	; (8003404 <UART_SetConfig+0x384>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d004      	beq.n	80030fe <UART_SetConfig+0x7e>
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4bc3      	ldr	r3, [pc, #780]	; (8003408 <UART_SetConfig+0x388>)
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d103      	bne.n	8003106 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030fe:	f7ff f8cf 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8003102:	6778      	str	r0, [r7, #116]	; 0x74
 8003104:	e002      	b.n	800310c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003106:	f7ff f8b7 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 800310a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800310c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003114:	f040 80b6 	bne.w	8003284 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311a:	461c      	mov	r4, r3
 800311c:	f04f 0500 	mov.w	r5, #0
 8003120:	4622      	mov	r2, r4
 8003122:	462b      	mov	r3, r5
 8003124:	1891      	adds	r1, r2, r2
 8003126:	6439      	str	r1, [r7, #64]	; 0x40
 8003128:	415b      	adcs	r3, r3
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
 800312c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003130:	1912      	adds	r2, r2, r4
 8003132:	eb45 0303 	adc.w	r3, r5, r3
 8003136:	f04f 0000 	mov.w	r0, #0
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	00d9      	lsls	r1, r3, #3
 8003140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003144:	00d0      	lsls	r0, r2, #3
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	1911      	adds	r1, r2, r4
 800314c:	6639      	str	r1, [r7, #96]	; 0x60
 800314e:	416b      	adcs	r3, r5
 8003150:	667b      	str	r3, [r7, #100]	; 0x64
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	1891      	adds	r1, r2, r2
 800315e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003160:	415b      	adcs	r3, r3
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003168:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800316c:	f7fd f8a8 	bl	80002c0 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4ba5      	ldr	r3, [pc, #660]	; (800340c <UART_SetConfig+0x38c>)
 8003176:	fba3 2302 	umull	r2, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	011e      	lsls	r6, r3, #4
 800317e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003180:	461c      	mov	r4, r3
 8003182:	f04f 0500 	mov.w	r5, #0
 8003186:	4622      	mov	r2, r4
 8003188:	462b      	mov	r3, r5
 800318a:	1891      	adds	r1, r2, r2
 800318c:	6339      	str	r1, [r7, #48]	; 0x30
 800318e:	415b      	adcs	r3, r3
 8003190:	637b      	str	r3, [r7, #52]	; 0x34
 8003192:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003196:	1912      	adds	r2, r2, r4
 8003198:	eb45 0303 	adc.w	r3, r5, r3
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	00d9      	lsls	r1, r3, #3
 80031a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031aa:	00d0      	lsls	r0, r2, #3
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	1911      	adds	r1, r2, r4
 80031b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80031b4:	416b      	adcs	r3, r5
 80031b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	461a      	mov	r2, r3
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	1891      	adds	r1, r2, r2
 80031c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80031c6:	415b      	adcs	r3, r3
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031d2:	f7fd f875 	bl	80002c0 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <UART_SetConfig+0x38c>)
 80031dc:	fba3 1302 	umull	r1, r3, r3, r2
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	2164      	movs	r1, #100	; 0x64
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	3332      	adds	r3, #50	; 0x32
 80031ee:	4a87      	ldr	r2, [pc, #540]	; (800340c <UART_SetConfig+0x38c>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031fc:	441e      	add	r6, r3
 80031fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003200:	4618      	mov	r0, r3
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	1894      	adds	r4, r2, r2
 800320c:	623c      	str	r4, [r7, #32]
 800320e:	415b      	adcs	r3, r3
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003216:	1812      	adds	r2, r2, r0
 8003218:	eb41 0303 	adc.w	r3, r1, r3
 800321c:	f04f 0400 	mov.w	r4, #0
 8003220:	f04f 0500 	mov.w	r5, #0
 8003224:	00dd      	lsls	r5, r3, #3
 8003226:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800322a:	00d4      	lsls	r4, r2, #3
 800322c:	4622      	mov	r2, r4
 800322e:	462b      	mov	r3, r5
 8003230:	1814      	adds	r4, r2, r0
 8003232:	653c      	str	r4, [r7, #80]	; 0x50
 8003234:	414b      	adcs	r3, r1
 8003236:	657b      	str	r3, [r7, #84]	; 0x54
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	461a      	mov	r2, r3
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	1891      	adds	r1, r2, r2
 8003244:	61b9      	str	r1, [r7, #24]
 8003246:	415b      	adcs	r3, r3
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003252:	f7fd f835 	bl	80002c0 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b6c      	ldr	r3, [pc, #432]	; (800340c <UART_SetConfig+0x38c>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a67      	ldr	r2, [pc, #412]	; (800340c <UART_SetConfig+0x38c>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4432      	add	r2, r6
 8003280:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003282:	e0b9      	b.n	80033f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003286:	461c      	mov	r4, r3
 8003288:	f04f 0500 	mov.w	r5, #0
 800328c:	4622      	mov	r2, r4
 800328e:	462b      	mov	r3, r5
 8003290:	1891      	adds	r1, r2, r2
 8003292:	6139      	str	r1, [r7, #16]
 8003294:	415b      	adcs	r3, r3
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800329c:	1912      	adds	r2, r2, r4
 800329e:	eb45 0303 	adc.w	r3, r5, r3
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	00d9      	lsls	r1, r3, #3
 80032ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032b0:	00d0      	lsls	r0, r2, #3
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	eb12 0804 	adds.w	r8, r2, r4
 80032ba:	eb43 0905 	adc.w	r9, r3, r5
 80032be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	008b      	lsls	r3, r1, #2
 80032d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032d6:	0082      	lsls	r2, r0, #2
 80032d8:	4640      	mov	r0, r8
 80032da:	4649      	mov	r1, r9
 80032dc:	f7fc fff0 	bl	80002c0 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4b49      	ldr	r3, [pc, #292]	; (800340c <UART_SetConfig+0x38c>)
 80032e6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	011e      	lsls	r6, r3, #4
 80032ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f0:	4618      	mov	r0, r3
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	1894      	adds	r4, r2, r2
 80032fc:	60bc      	str	r4, [r7, #8]
 80032fe:	415b      	adcs	r3, r3
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003306:	1812      	adds	r2, r2, r0
 8003308:	eb41 0303 	adc.w	r3, r1, r3
 800330c:	f04f 0400 	mov.w	r4, #0
 8003310:	f04f 0500 	mov.w	r5, #0
 8003314:	00dd      	lsls	r5, r3, #3
 8003316:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800331a:	00d4      	lsls	r4, r2, #3
 800331c:	4622      	mov	r2, r4
 800331e:	462b      	mov	r3, r5
 8003320:	1814      	adds	r4, r2, r0
 8003322:	64bc      	str	r4, [r7, #72]	; 0x48
 8003324:	414b      	adcs	r3, r1
 8003326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	008b      	lsls	r3, r1, #2
 800333c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003340:	0082      	lsls	r2, r0, #2
 8003342:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003346:	f7fc ffbb 	bl	80002c0 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4b2f      	ldr	r3, [pc, #188]	; (800340c <UART_SetConfig+0x38c>)
 8003350:	fba3 1302 	umull	r1, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	2164      	movs	r1, #100	; 0x64
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	3332      	adds	r3, #50	; 0x32
 8003362:	4a2a      	ldr	r2, [pc, #168]	; (800340c <UART_SetConfig+0x38c>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336e:	441e      	add	r6, r3
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	4618      	mov	r0, r3
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	1894      	adds	r4, r2, r2
 800337e:	603c      	str	r4, [r7, #0]
 8003380:	415b      	adcs	r3, r3
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003388:	1812      	adds	r2, r2, r0
 800338a:	eb41 0303 	adc.w	r3, r1, r3
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	f04f 0500 	mov.w	r5, #0
 8003396:	00dd      	lsls	r5, r3, #3
 8003398:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800339c:	00d4      	lsls	r4, r2, #3
 800339e:	4622      	mov	r2, r4
 80033a0:	462b      	mov	r3, r5
 80033a2:	eb12 0a00 	adds.w	sl, r2, r0
 80033a6:	eb43 0b01 	adc.w	fp, r3, r1
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033c2:	0082      	lsls	r2, r0, #2
 80033c4:	4650      	mov	r0, sl
 80033c6:	4659      	mov	r1, fp
 80033c8:	f7fc ff7a 	bl	80002c0 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <UART_SetConfig+0x38c>)
 80033d2:	fba3 1302 	umull	r1, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2164      	movs	r1, #100	; 0x64
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <UART_SetConfig+0x38c>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4432      	add	r2, r6
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	377c      	adds	r7, #124	; 0x7c
 80033fc:	46bd      	mov	sp, r7
 80033fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003402:	bf00      	nop
 8003404:	40011000 	.word	0x40011000
 8003408:	40011400 	.word	0x40011400
 800340c:	51eb851f 	.word	0x51eb851f

08003410 <__errno>:
 8003410:	4b01      	ldr	r3, [pc, #4]	; (8003418 <__errno+0x8>)
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000230 	.word	0x20000230

0800341c <__libc_init_array>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	4d0d      	ldr	r5, [pc, #52]	; (8003454 <__libc_init_array+0x38>)
 8003420:	4c0d      	ldr	r4, [pc, #52]	; (8003458 <__libc_init_array+0x3c>)
 8003422:	1b64      	subs	r4, r4, r5
 8003424:	10a4      	asrs	r4, r4, #2
 8003426:	2600      	movs	r6, #0
 8003428:	42a6      	cmp	r6, r4
 800342a:	d109      	bne.n	8003440 <__libc_init_array+0x24>
 800342c:	4d0b      	ldr	r5, [pc, #44]	; (800345c <__libc_init_array+0x40>)
 800342e:	4c0c      	ldr	r4, [pc, #48]	; (8003460 <__libc_init_array+0x44>)
 8003430:	f001 f93e 	bl	80046b0 <_init>
 8003434:	1b64      	subs	r4, r4, r5
 8003436:	10a4      	asrs	r4, r4, #2
 8003438:	2600      	movs	r6, #0
 800343a:	42a6      	cmp	r6, r4
 800343c:	d105      	bne.n	800344a <__libc_init_array+0x2e>
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	f855 3b04 	ldr.w	r3, [r5], #4
 8003444:	4798      	blx	r3
 8003446:	3601      	adds	r6, #1
 8003448:	e7ee      	b.n	8003428 <__libc_init_array+0xc>
 800344a:	f855 3b04 	ldr.w	r3, [r5], #4
 800344e:	4798      	blx	r3
 8003450:	3601      	adds	r6, #1
 8003452:	e7f2      	b.n	800343a <__libc_init_array+0x1e>
 8003454:	08004978 	.word	0x08004978
 8003458:	08004978 	.word	0x08004978
 800345c:	08004978 	.word	0x08004978
 8003460:	0800497c 	.word	0x0800497c

08003464 <memcpy>:
 8003464:	440a      	add	r2, r1
 8003466:	4291      	cmp	r1, r2
 8003468:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800346c:	d100      	bne.n	8003470 <memcpy+0xc>
 800346e:	4770      	bx	lr
 8003470:	b510      	push	{r4, lr}
 8003472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800347a:	4291      	cmp	r1, r2
 800347c:	d1f9      	bne.n	8003472 <memcpy+0xe>
 800347e:	bd10      	pop	{r4, pc}

08003480 <memset>:
 8003480:	4402      	add	r2, r0
 8003482:	4603      	mov	r3, r0
 8003484:	4293      	cmp	r3, r2
 8003486:	d100      	bne.n	800348a <memset+0xa>
 8003488:	4770      	bx	lr
 800348a:	f803 1b01 	strb.w	r1, [r3], #1
 800348e:	e7f9      	b.n	8003484 <memset+0x4>

08003490 <siscanf>:
 8003490:	b40e      	push	{r1, r2, r3}
 8003492:	b510      	push	{r4, lr}
 8003494:	b09f      	sub	sp, #124	; 0x7c
 8003496:	ac21      	add	r4, sp, #132	; 0x84
 8003498:	f44f 7101 	mov.w	r1, #516	; 0x204
 800349c:	f854 2b04 	ldr.w	r2, [r4], #4
 80034a0:	9201      	str	r2, [sp, #4]
 80034a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80034a6:	9004      	str	r0, [sp, #16]
 80034a8:	9008      	str	r0, [sp, #32]
 80034aa:	f7fc feab 	bl	8000204 <strlen>
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <siscanf+0x50>)
 80034b0:	9005      	str	r0, [sp, #20]
 80034b2:	9009      	str	r0, [sp, #36]	; 0x24
 80034b4:	930d      	str	r3, [sp, #52]	; 0x34
 80034b6:	480b      	ldr	r0, [pc, #44]	; (80034e4 <siscanf+0x54>)
 80034b8:	9a01      	ldr	r2, [sp, #4]
 80034ba:	6800      	ldr	r0, [r0, #0]
 80034bc:	9403      	str	r4, [sp, #12]
 80034be:	2300      	movs	r3, #0
 80034c0:	9311      	str	r3, [sp, #68]	; 0x44
 80034c2:	9316      	str	r3, [sp, #88]	; 0x58
 80034c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80034cc:	a904      	add	r1, sp, #16
 80034ce:	4623      	mov	r3, r4
 80034d0:	f000 fa0e 	bl	80038f0 <__ssvfiscanf_r>
 80034d4:	b01f      	add	sp, #124	; 0x7c
 80034d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034da:	b003      	add	sp, #12
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	20000230 	.word	0x20000230

080034e8 <__seofread>:
 80034e8:	2000      	movs	r0, #0
 80034ea:	4770      	bx	lr

080034ec <strncmp>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	b16a      	cbz	r2, 800350c <strncmp+0x20>
 80034f0:	3901      	subs	r1, #1
 80034f2:	1884      	adds	r4, r0, r2
 80034f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80034f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d103      	bne.n	8003508 <strncmp+0x1c>
 8003500:	42a0      	cmp	r0, r4
 8003502:	d001      	beq.n	8003508 <strncmp+0x1c>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f5      	bne.n	80034f4 <strncmp+0x8>
 8003508:	1a98      	subs	r0, r3, r2
 800350a:	bd10      	pop	{r4, pc}
 800350c:	4610      	mov	r0, r2
 800350e:	e7fc      	b.n	800350a <strncmp+0x1e>

08003510 <_vsniprintf_r>:
 8003510:	b530      	push	{r4, r5, lr}
 8003512:	1e14      	subs	r4, r2, #0
 8003514:	4605      	mov	r5, r0
 8003516:	b09b      	sub	sp, #108	; 0x6c
 8003518:	4618      	mov	r0, r3
 800351a:	da05      	bge.n	8003528 <_vsniprintf_r+0x18>
 800351c:	238b      	movs	r3, #139	; 0x8b
 800351e:	602b      	str	r3, [r5, #0]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003524:	b01b      	add	sp, #108	; 0x6c
 8003526:	bd30      	pop	{r4, r5, pc}
 8003528:	f44f 7302 	mov.w	r3, #520	; 0x208
 800352c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003530:	bf14      	ite	ne
 8003532:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003536:	4623      	moveq	r3, r4
 8003538:	9302      	str	r3, [sp, #8]
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003540:	9100      	str	r1, [sp, #0]
 8003542:	9104      	str	r1, [sp, #16]
 8003544:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003548:	4602      	mov	r2, r0
 800354a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800354c:	4669      	mov	r1, sp
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f874 	bl	800363c <_svfiprintf_r>
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	bfbc      	itt	lt
 8003558:	238b      	movlt	r3, #139	; 0x8b
 800355a:	602b      	strlt	r3, [r5, #0]
 800355c:	2c00      	cmp	r4, #0
 800355e:	d0e1      	beq.n	8003524 <_vsniprintf_r+0x14>
 8003560:	9b00      	ldr	r3, [sp, #0]
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e7dd      	b.n	8003524 <_vsniprintf_r+0x14>

08003568 <vsniprintf>:
 8003568:	b507      	push	{r0, r1, r2, lr}
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	460a      	mov	r2, r1
 8003570:	4601      	mov	r1, r0
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <vsniprintf+0x18>)
 8003574:	6800      	ldr	r0, [r0, #0]
 8003576:	f7ff ffcb 	bl	8003510 <_vsniprintf_r>
 800357a:	b003      	add	sp, #12
 800357c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003580:	20000230 	.word	0x20000230

08003584 <__ssputs_r>:
 8003584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003588:	688e      	ldr	r6, [r1, #8]
 800358a:	429e      	cmp	r6, r3
 800358c:	4682      	mov	sl, r0
 800358e:	460c      	mov	r4, r1
 8003590:	4690      	mov	r8, r2
 8003592:	461f      	mov	r7, r3
 8003594:	d838      	bhi.n	8003608 <__ssputs_r+0x84>
 8003596:	898a      	ldrh	r2, [r1, #12]
 8003598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800359c:	d032      	beq.n	8003604 <__ssputs_r+0x80>
 800359e:	6825      	ldr	r5, [r4, #0]
 80035a0:	6909      	ldr	r1, [r1, #16]
 80035a2:	eba5 0901 	sub.w	r9, r5, r1
 80035a6:	6965      	ldr	r5, [r4, #20]
 80035a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035b0:	3301      	adds	r3, #1
 80035b2:	444b      	add	r3, r9
 80035b4:	106d      	asrs	r5, r5, #1
 80035b6:	429d      	cmp	r5, r3
 80035b8:	bf38      	it	cc
 80035ba:	461d      	movcc	r5, r3
 80035bc:	0553      	lsls	r3, r2, #21
 80035be:	d531      	bpl.n	8003624 <__ssputs_r+0xa0>
 80035c0:	4629      	mov	r1, r5
 80035c2:	f000 ffd1 	bl	8004568 <_malloc_r>
 80035c6:	4606      	mov	r6, r0
 80035c8:	b950      	cbnz	r0, 80035e0 <__ssputs_r+0x5c>
 80035ca:	230c      	movs	r3, #12
 80035cc:	f8ca 3000 	str.w	r3, [sl]
 80035d0:	89a3      	ldrh	r3, [r4, #12]
 80035d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d6:	81a3      	strh	r3, [r4, #12]
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	6921      	ldr	r1, [r4, #16]
 80035e2:	464a      	mov	r2, r9
 80035e4:	f7ff ff3e 	bl	8003464 <memcpy>
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f2:	81a3      	strh	r3, [r4, #12]
 80035f4:	6126      	str	r6, [r4, #16]
 80035f6:	6165      	str	r5, [r4, #20]
 80035f8:	444e      	add	r6, r9
 80035fa:	eba5 0509 	sub.w	r5, r5, r9
 80035fe:	6026      	str	r6, [r4, #0]
 8003600:	60a5      	str	r5, [r4, #8]
 8003602:	463e      	mov	r6, r7
 8003604:	42be      	cmp	r6, r7
 8003606:	d900      	bls.n	800360a <__ssputs_r+0x86>
 8003608:	463e      	mov	r6, r7
 800360a:	4632      	mov	r2, r6
 800360c:	6820      	ldr	r0, [r4, #0]
 800360e:	4641      	mov	r1, r8
 8003610:	f000 ff40 	bl	8004494 <memmove>
 8003614:	68a3      	ldr	r3, [r4, #8]
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	1b9b      	subs	r3, r3, r6
 800361a:	4432      	add	r2, r6
 800361c:	60a3      	str	r3, [r4, #8]
 800361e:	6022      	str	r2, [r4, #0]
 8003620:	2000      	movs	r0, #0
 8003622:	e7db      	b.n	80035dc <__ssputs_r+0x58>
 8003624:	462a      	mov	r2, r5
 8003626:	f000 fff9 	bl	800461c <_realloc_r>
 800362a:	4606      	mov	r6, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d1e1      	bne.n	80035f4 <__ssputs_r+0x70>
 8003630:	6921      	ldr	r1, [r4, #16]
 8003632:	4650      	mov	r0, sl
 8003634:	f000 ff48 	bl	80044c8 <_free_r>
 8003638:	e7c7      	b.n	80035ca <__ssputs_r+0x46>
	...

0800363c <_svfiprintf_r>:
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	4698      	mov	r8, r3
 8003642:	898b      	ldrh	r3, [r1, #12]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	b09d      	sub	sp, #116	; 0x74
 8003648:	4607      	mov	r7, r0
 800364a:	460d      	mov	r5, r1
 800364c:	4614      	mov	r4, r2
 800364e:	d50e      	bpl.n	800366e <_svfiprintf_r+0x32>
 8003650:	690b      	ldr	r3, [r1, #16]
 8003652:	b963      	cbnz	r3, 800366e <_svfiprintf_r+0x32>
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	f000 ff87 	bl	8004568 <_malloc_r>
 800365a:	6028      	str	r0, [r5, #0]
 800365c:	6128      	str	r0, [r5, #16]
 800365e:	b920      	cbnz	r0, 800366a <_svfiprintf_r+0x2e>
 8003660:	230c      	movs	r3, #12
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003668:	e0d1      	b.n	800380e <_svfiprintf_r+0x1d2>
 800366a:	2340      	movs	r3, #64	; 0x40
 800366c:	616b      	str	r3, [r5, #20]
 800366e:	2300      	movs	r3, #0
 8003670:	9309      	str	r3, [sp, #36]	; 0x24
 8003672:	2320      	movs	r3, #32
 8003674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003678:	f8cd 800c 	str.w	r8, [sp, #12]
 800367c:	2330      	movs	r3, #48	; 0x30
 800367e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003828 <_svfiprintf_r+0x1ec>
 8003682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003686:	f04f 0901 	mov.w	r9, #1
 800368a:	4623      	mov	r3, r4
 800368c:	469a      	mov	sl, r3
 800368e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003692:	b10a      	cbz	r2, 8003698 <_svfiprintf_r+0x5c>
 8003694:	2a25      	cmp	r2, #37	; 0x25
 8003696:	d1f9      	bne.n	800368c <_svfiprintf_r+0x50>
 8003698:	ebba 0b04 	subs.w	fp, sl, r4
 800369c:	d00b      	beq.n	80036b6 <_svfiprintf_r+0x7a>
 800369e:	465b      	mov	r3, fp
 80036a0:	4622      	mov	r2, r4
 80036a2:	4629      	mov	r1, r5
 80036a4:	4638      	mov	r0, r7
 80036a6:	f7ff ff6d 	bl	8003584 <__ssputs_r>
 80036aa:	3001      	adds	r0, #1
 80036ac:	f000 80aa 	beq.w	8003804 <_svfiprintf_r+0x1c8>
 80036b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036b2:	445a      	add	r2, fp
 80036b4:	9209      	str	r2, [sp, #36]	; 0x24
 80036b6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80a2 	beq.w	8003804 <_svfiprintf_r+0x1c8>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ca:	f10a 0a01 	add.w	sl, sl, #1
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	9307      	str	r3, [sp, #28]
 80036d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036d6:	931a      	str	r3, [sp, #104]	; 0x68
 80036d8:	4654      	mov	r4, sl
 80036da:	2205      	movs	r2, #5
 80036dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e0:	4851      	ldr	r0, [pc, #324]	; (8003828 <_svfiprintf_r+0x1ec>)
 80036e2:	f7fc fd9d 	bl	8000220 <memchr>
 80036e6:	9a04      	ldr	r2, [sp, #16]
 80036e8:	b9d8      	cbnz	r0, 8003722 <_svfiprintf_r+0xe6>
 80036ea:	06d0      	lsls	r0, r2, #27
 80036ec:	bf44      	itt	mi
 80036ee:	2320      	movmi	r3, #32
 80036f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f4:	0711      	lsls	r1, r2, #28
 80036f6:	bf44      	itt	mi
 80036f8:	232b      	movmi	r3, #43	; 0x2b
 80036fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003702:	2b2a      	cmp	r3, #42	; 0x2a
 8003704:	d015      	beq.n	8003732 <_svfiprintf_r+0xf6>
 8003706:	9a07      	ldr	r2, [sp, #28]
 8003708:	4654      	mov	r4, sl
 800370a:	2000      	movs	r0, #0
 800370c:	f04f 0c0a 	mov.w	ip, #10
 8003710:	4621      	mov	r1, r4
 8003712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003716:	3b30      	subs	r3, #48	; 0x30
 8003718:	2b09      	cmp	r3, #9
 800371a:	d94e      	bls.n	80037ba <_svfiprintf_r+0x17e>
 800371c:	b1b0      	cbz	r0, 800374c <_svfiprintf_r+0x110>
 800371e:	9207      	str	r2, [sp, #28]
 8003720:	e014      	b.n	800374c <_svfiprintf_r+0x110>
 8003722:	eba0 0308 	sub.w	r3, r0, r8
 8003726:	fa09 f303 	lsl.w	r3, r9, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	9304      	str	r3, [sp, #16]
 800372e:	46a2      	mov	sl, r4
 8003730:	e7d2      	b.n	80036d8 <_svfiprintf_r+0x9c>
 8003732:	9b03      	ldr	r3, [sp, #12]
 8003734:	1d19      	adds	r1, r3, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	9103      	str	r1, [sp, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	bfbb      	ittet	lt
 800373e:	425b      	neglt	r3, r3
 8003740:	f042 0202 	orrlt.w	r2, r2, #2
 8003744:	9307      	strge	r3, [sp, #28]
 8003746:	9307      	strlt	r3, [sp, #28]
 8003748:	bfb8      	it	lt
 800374a:	9204      	strlt	r2, [sp, #16]
 800374c:	7823      	ldrb	r3, [r4, #0]
 800374e:	2b2e      	cmp	r3, #46	; 0x2e
 8003750:	d10c      	bne.n	800376c <_svfiprintf_r+0x130>
 8003752:	7863      	ldrb	r3, [r4, #1]
 8003754:	2b2a      	cmp	r3, #42	; 0x2a
 8003756:	d135      	bne.n	80037c4 <_svfiprintf_r+0x188>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfb8      	it	lt
 8003764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003768:	3402      	adds	r4, #2
 800376a:	9305      	str	r3, [sp, #20]
 800376c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003838 <_svfiprintf_r+0x1fc>
 8003770:	7821      	ldrb	r1, [r4, #0]
 8003772:	2203      	movs	r2, #3
 8003774:	4650      	mov	r0, sl
 8003776:	f7fc fd53 	bl	8000220 <memchr>
 800377a:	b140      	cbz	r0, 800378e <_svfiprintf_r+0x152>
 800377c:	2340      	movs	r3, #64	; 0x40
 800377e:	eba0 000a 	sub.w	r0, r0, sl
 8003782:	fa03 f000 	lsl.w	r0, r3, r0
 8003786:	9b04      	ldr	r3, [sp, #16]
 8003788:	4303      	orrs	r3, r0
 800378a:	3401      	adds	r4, #1
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003792:	4826      	ldr	r0, [pc, #152]	; (800382c <_svfiprintf_r+0x1f0>)
 8003794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003798:	2206      	movs	r2, #6
 800379a:	f7fc fd41 	bl	8000220 <memchr>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d038      	beq.n	8003814 <_svfiprintf_r+0x1d8>
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <_svfiprintf_r+0x1f4>)
 80037a4:	bb1b      	cbnz	r3, 80037ee <_svfiprintf_r+0x1b2>
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	3307      	adds	r3, #7
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	3308      	adds	r3, #8
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b4:	4433      	add	r3, r6
 80037b6:	9309      	str	r3, [sp, #36]	; 0x24
 80037b8:	e767      	b.n	800368a <_svfiprintf_r+0x4e>
 80037ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80037be:	460c      	mov	r4, r1
 80037c0:	2001      	movs	r0, #1
 80037c2:	e7a5      	b.n	8003710 <_svfiprintf_r+0xd4>
 80037c4:	2300      	movs	r3, #0
 80037c6:	3401      	adds	r4, #1
 80037c8:	9305      	str	r3, [sp, #20]
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 0c0a 	mov.w	ip, #10
 80037d0:	4620      	mov	r0, r4
 80037d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037d6:	3a30      	subs	r2, #48	; 0x30
 80037d8:	2a09      	cmp	r2, #9
 80037da:	d903      	bls.n	80037e4 <_svfiprintf_r+0x1a8>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0c5      	beq.n	800376c <_svfiprintf_r+0x130>
 80037e0:	9105      	str	r1, [sp, #20]
 80037e2:	e7c3      	b.n	800376c <_svfiprintf_r+0x130>
 80037e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e8:	4604      	mov	r4, r0
 80037ea:	2301      	movs	r3, #1
 80037ec:	e7f0      	b.n	80037d0 <_svfiprintf_r+0x194>
 80037ee:	ab03      	add	r3, sp, #12
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	462a      	mov	r2, r5
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <_svfiprintf_r+0x1f8>)
 80037f6:	a904      	add	r1, sp, #16
 80037f8:	4638      	mov	r0, r7
 80037fa:	f3af 8000 	nop.w
 80037fe:	1c42      	adds	r2, r0, #1
 8003800:	4606      	mov	r6, r0
 8003802:	d1d6      	bne.n	80037b2 <_svfiprintf_r+0x176>
 8003804:	89ab      	ldrh	r3, [r5, #12]
 8003806:	065b      	lsls	r3, r3, #25
 8003808:	f53f af2c 	bmi.w	8003664 <_svfiprintf_r+0x28>
 800380c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800380e:	b01d      	add	sp, #116	; 0x74
 8003810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003814:	ab03      	add	r3, sp, #12
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	462a      	mov	r2, r5
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <_svfiprintf_r+0x1f8>)
 800381c:	a904      	add	r1, sp, #16
 800381e:	4638      	mov	r0, r7
 8003820:	f000 fa4c 	bl	8003cbc <_printf_i>
 8003824:	e7eb      	b.n	80037fe <_svfiprintf_r+0x1c2>
 8003826:	bf00      	nop
 8003828:	080047c0 	.word	0x080047c0
 800382c:	080047ca 	.word	0x080047ca
 8003830:	00000000 	.word	0x00000000
 8003834:	08003585 	.word	0x08003585
 8003838:	080047c6 	.word	0x080047c6

0800383c <_sungetc_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	1c4b      	adds	r3, r1, #1
 8003840:	4614      	mov	r4, r2
 8003842:	d103      	bne.n	800384c <_sungetc_r+0x10>
 8003844:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003848:	4628      	mov	r0, r5
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	8993      	ldrh	r3, [r2, #12]
 800384e:	f023 0320 	bic.w	r3, r3, #32
 8003852:	8193      	strh	r3, [r2, #12]
 8003854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	b2cd      	uxtb	r5, r1
 800385a:	b18b      	cbz	r3, 8003880 <_sungetc_r+0x44>
 800385c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800385e:	4293      	cmp	r3, r2
 8003860:	dd08      	ble.n	8003874 <_sungetc_r+0x38>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	1e5a      	subs	r2, r3, #1
 8003866:	6022      	str	r2, [r4, #0]
 8003868:	f803 5c01 	strb.w	r5, [r3, #-1]
 800386c:	6863      	ldr	r3, [r4, #4]
 800386e:	3301      	adds	r3, #1
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	e7e9      	b.n	8003848 <_sungetc_r+0xc>
 8003874:	4621      	mov	r1, r4
 8003876:	f000 fdd1 	bl	800441c <__submore>
 800387a:	2800      	cmp	r0, #0
 800387c:	d0f1      	beq.n	8003862 <_sungetc_r+0x26>
 800387e:	e7e1      	b.n	8003844 <_sungetc_r+0x8>
 8003880:	6921      	ldr	r1, [r4, #16]
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	b151      	cbz	r1, 800389c <_sungetc_r+0x60>
 8003886:	4299      	cmp	r1, r3
 8003888:	d208      	bcs.n	800389c <_sungetc_r+0x60>
 800388a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800388e:	42a9      	cmp	r1, r5
 8003890:	d104      	bne.n	800389c <_sungetc_r+0x60>
 8003892:	3b01      	subs	r3, #1
 8003894:	3201      	adds	r2, #1
 8003896:	6023      	str	r3, [r4, #0]
 8003898:	6062      	str	r2, [r4, #4]
 800389a:	e7d5      	b.n	8003848 <_sungetc_r+0xc>
 800389c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80038a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038a4:	6363      	str	r3, [r4, #52]	; 0x34
 80038a6:	2303      	movs	r3, #3
 80038a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80038aa:	4623      	mov	r3, r4
 80038ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	2301      	movs	r3, #1
 80038b4:	e7dc      	b.n	8003870 <_sungetc_r+0x34>

080038b6 <__ssrefill_r>:
 80038b6:	b510      	push	{r4, lr}
 80038b8:	460c      	mov	r4, r1
 80038ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80038bc:	b169      	cbz	r1, 80038da <__ssrefill_r+0x24>
 80038be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038c2:	4299      	cmp	r1, r3
 80038c4:	d001      	beq.n	80038ca <__ssrefill_r+0x14>
 80038c6:	f000 fdff 	bl	80044c8 <_free_r>
 80038ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	2000      	movs	r0, #0
 80038d0:	6360      	str	r0, [r4, #52]	; 0x34
 80038d2:	b113      	cbz	r3, 80038da <__ssrefill_r+0x24>
 80038d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	6923      	ldr	r3, [r4, #16]
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ee:	e7f3      	b.n	80038d8 <__ssrefill_r+0x22>

080038f0 <__ssvfiscanf_r>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	460c      	mov	r4, r1
 80038f6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80038fa:	2100      	movs	r1, #0
 80038fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003900:	49b2      	ldr	r1, [pc, #712]	; (8003bcc <__ssvfiscanf_r+0x2dc>)
 8003902:	91a0      	str	r1, [sp, #640]	; 0x280
 8003904:	f10d 0804 	add.w	r8, sp, #4
 8003908:	49b1      	ldr	r1, [pc, #708]	; (8003bd0 <__ssvfiscanf_r+0x2e0>)
 800390a:	4fb2      	ldr	r7, [pc, #712]	; (8003bd4 <__ssvfiscanf_r+0x2e4>)
 800390c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003bd8 <__ssvfiscanf_r+0x2e8>
 8003910:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003914:	4606      	mov	r6, r0
 8003916:	91a1      	str	r1, [sp, #644]	; 0x284
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f892 a000 	ldrb.w	sl, [r2]
 800391e:	f1ba 0f00 	cmp.w	sl, #0
 8003922:	f000 8151 	beq.w	8003bc8 <__ssvfiscanf_r+0x2d8>
 8003926:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800392a:	f013 0308 	ands.w	r3, r3, #8
 800392e:	f102 0501 	add.w	r5, r2, #1
 8003932:	d019      	beq.n	8003968 <__ssvfiscanf_r+0x78>
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	dd0f      	ble.n	800395a <__ssvfiscanf_r+0x6a>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	5cba      	ldrb	r2, [r7, r2]
 8003940:	0712      	lsls	r2, r2, #28
 8003942:	d401      	bmi.n	8003948 <__ssvfiscanf_r+0x58>
 8003944:	462a      	mov	r2, r5
 8003946:	e7e8      	b.n	800391a <__ssvfiscanf_r+0x2a>
 8003948:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800394a:	3201      	adds	r2, #1
 800394c:	9245      	str	r2, [sp, #276]	; 0x114
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	3301      	adds	r3, #1
 8003952:	3a01      	subs	r2, #1
 8003954:	6062      	str	r2, [r4, #4]
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e7ec      	b.n	8003934 <__ssvfiscanf_r+0x44>
 800395a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800395c:	4621      	mov	r1, r4
 800395e:	4630      	mov	r0, r6
 8003960:	4798      	blx	r3
 8003962:	2800      	cmp	r0, #0
 8003964:	d0e9      	beq.n	800393a <__ssvfiscanf_r+0x4a>
 8003966:	e7ed      	b.n	8003944 <__ssvfiscanf_r+0x54>
 8003968:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800396c:	f040 8083 	bne.w	8003a76 <__ssvfiscanf_r+0x186>
 8003970:	9341      	str	r3, [sp, #260]	; 0x104
 8003972:	9343      	str	r3, [sp, #268]	; 0x10c
 8003974:	7853      	ldrb	r3, [r2, #1]
 8003976:	2b2a      	cmp	r3, #42	; 0x2a
 8003978:	bf02      	ittt	eq
 800397a:	2310      	moveq	r3, #16
 800397c:	1c95      	addeq	r5, r2, #2
 800397e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003980:	220a      	movs	r2, #10
 8003982:	46ab      	mov	fp, r5
 8003984:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003988:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800398c:	2b09      	cmp	r3, #9
 800398e:	d91d      	bls.n	80039cc <__ssvfiscanf_r+0xdc>
 8003990:	4891      	ldr	r0, [pc, #580]	; (8003bd8 <__ssvfiscanf_r+0x2e8>)
 8003992:	2203      	movs	r2, #3
 8003994:	f7fc fc44 	bl	8000220 <memchr>
 8003998:	b140      	cbz	r0, 80039ac <__ssvfiscanf_r+0xbc>
 800399a:	2301      	movs	r3, #1
 800399c:	eba0 0009 	sub.w	r0, r0, r9
 80039a0:	fa03 f000 	lsl.w	r0, r3, r0
 80039a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039a6:	4318      	orrs	r0, r3
 80039a8:	9041      	str	r0, [sp, #260]	; 0x104
 80039aa:	465d      	mov	r5, fp
 80039ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039b0:	2b78      	cmp	r3, #120	; 0x78
 80039b2:	d806      	bhi.n	80039c2 <__ssvfiscanf_r+0xd2>
 80039b4:	2b57      	cmp	r3, #87	; 0x57
 80039b6:	d810      	bhi.n	80039da <__ssvfiscanf_r+0xea>
 80039b8:	2b25      	cmp	r3, #37	; 0x25
 80039ba:	d05c      	beq.n	8003a76 <__ssvfiscanf_r+0x186>
 80039bc:	d856      	bhi.n	8003a6c <__ssvfiscanf_r+0x17c>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d074      	beq.n	8003aac <__ssvfiscanf_r+0x1bc>
 80039c2:	2303      	movs	r3, #3
 80039c4:	9347      	str	r3, [sp, #284]	; 0x11c
 80039c6:	230a      	movs	r3, #10
 80039c8:	9342      	str	r3, [sp, #264]	; 0x108
 80039ca:	e081      	b.n	8003ad0 <__ssvfiscanf_r+0x1e0>
 80039cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80039ce:	fb02 1303 	mla	r3, r2, r3, r1
 80039d2:	3b30      	subs	r3, #48	; 0x30
 80039d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80039d6:	465d      	mov	r5, fp
 80039d8:	e7d3      	b.n	8003982 <__ssvfiscanf_r+0x92>
 80039da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80039de:	2a20      	cmp	r2, #32
 80039e0:	d8ef      	bhi.n	80039c2 <__ssvfiscanf_r+0xd2>
 80039e2:	a101      	add	r1, pc, #4	; (adr r1, 80039e8 <__ssvfiscanf_r+0xf8>)
 80039e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80039e8:	08003abb 	.word	0x08003abb
 80039ec:	080039c3 	.word	0x080039c3
 80039f0:	080039c3 	.word	0x080039c3
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	080039c3 	.word	0x080039c3
 80039fc:	080039c3 	.word	0x080039c3
 8003a00:	080039c3 	.word	0x080039c3
 8003a04:	080039c3 	.word	0x080039c3
 8003a08:	080039c3 	.word	0x080039c3
 8003a0c:	080039c3 	.word	0x080039c3
 8003a10:	080039c3 	.word	0x080039c3
 8003a14:	08003b2f 	.word	0x08003b2f
 8003a18:	08003b05 	.word	0x08003b05
 8003a1c:	08003a73 	.word	0x08003a73
 8003a20:	08003a73 	.word	0x08003a73
 8003a24:	08003a73 	.word	0x08003a73
 8003a28:	080039c3 	.word	0x080039c3
 8003a2c:	08003b09 	.word	0x08003b09
 8003a30:	080039c3 	.word	0x080039c3
 8003a34:	080039c3 	.word	0x080039c3
 8003a38:	080039c3 	.word	0x080039c3
 8003a3c:	080039c3 	.word	0x080039c3
 8003a40:	08003b3f 	.word	0x08003b3f
 8003a44:	08003b11 	.word	0x08003b11
 8003a48:	08003ab3 	.word	0x08003ab3
 8003a4c:	080039c3 	.word	0x080039c3
 8003a50:	080039c3 	.word	0x080039c3
 8003a54:	08003b3b 	.word	0x08003b3b
 8003a58:	080039c3 	.word	0x080039c3
 8003a5c:	08003b05 	.word	0x08003b05
 8003a60:	080039c3 	.word	0x080039c3
 8003a64:	080039c3 	.word	0x080039c3
 8003a68:	08003abb 	.word	0x08003abb
 8003a6c:	3b45      	subs	r3, #69	; 0x45
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d8a7      	bhi.n	80039c2 <__ssvfiscanf_r+0xd2>
 8003a72:	2305      	movs	r3, #5
 8003a74:	e02b      	b.n	8003ace <__ssvfiscanf_r+0x1de>
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dd0d      	ble.n	8003a98 <__ssvfiscanf_r+0x1a8>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	4552      	cmp	r2, sl
 8003a82:	f040 80a1 	bne.w	8003bc8 <__ssvfiscanf_r+0x2d8>
 8003a86:	3301      	adds	r3, #1
 8003a88:	6862      	ldr	r2, [r4, #4]
 8003a8a:	6023      	str	r3, [r4, #0]
 8003a8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	3301      	adds	r3, #1
 8003a92:	6062      	str	r2, [r4, #4]
 8003a94:	9345      	str	r3, [sp, #276]	; 0x114
 8003a96:	e755      	b.n	8003944 <__ssvfiscanf_r+0x54>
 8003a98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	4798      	blx	r3
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d0eb      	beq.n	8003a7c <__ssvfiscanf_r+0x18c>
 8003aa4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	f040 8084 	bne.w	8003bb4 <__ssvfiscanf_r+0x2c4>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab0:	e086      	b.n	8003bc0 <__ssvfiscanf_r+0x2d0>
 8003ab2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ab4:	f042 0220 	orr.w	r2, r2, #32
 8003ab8:	9241      	str	r2, [sp, #260]	; 0x104
 8003aba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	9241      	str	r2, [sp, #260]	; 0x104
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	2b6f      	cmp	r3, #111	; 0x6f
 8003ac6:	9242      	str	r2, [sp, #264]	; 0x108
 8003ac8:	bf34      	ite	cc
 8003aca:	2303      	movcc	r3, #3
 8003acc:	2304      	movcs	r3, #4
 8003ace:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	dd41      	ble.n	8003b5a <__ssvfiscanf_r+0x26a>
 8003ad6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ad8:	0659      	lsls	r1, r3, #25
 8003ada:	d404      	bmi.n	8003ae6 <__ssvfiscanf_r+0x1f6>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	5cba      	ldrb	r2, [r7, r2]
 8003ae2:	0712      	lsls	r2, r2, #28
 8003ae4:	d440      	bmi.n	8003b68 <__ssvfiscanf_r+0x278>
 8003ae6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	dc4f      	bgt.n	8003b8c <__ssvfiscanf_r+0x29c>
 8003aec:	466b      	mov	r3, sp
 8003aee:	4622      	mov	r2, r4
 8003af0:	a941      	add	r1, sp, #260	; 0x104
 8003af2:	4630      	mov	r0, r6
 8003af4:	f000 fa08 	bl	8003f08 <_scanf_chars>
 8003af8:	2801      	cmp	r0, #1
 8003afa:	d065      	beq.n	8003bc8 <__ssvfiscanf_r+0x2d8>
 8003afc:	2802      	cmp	r0, #2
 8003afe:	f47f af21 	bne.w	8003944 <__ssvfiscanf_r+0x54>
 8003b02:	e7cf      	b.n	8003aa4 <__ssvfiscanf_r+0x1b4>
 8003b04:	220a      	movs	r2, #10
 8003b06:	e7dd      	b.n	8003ac4 <__ssvfiscanf_r+0x1d4>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9342      	str	r3, [sp, #264]	; 0x108
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e7de      	b.n	8003ace <__ssvfiscanf_r+0x1de>
 8003b10:	2308      	movs	r3, #8
 8003b12:	9342      	str	r3, [sp, #264]	; 0x108
 8003b14:	2304      	movs	r3, #4
 8003b16:	e7da      	b.n	8003ace <__ssvfiscanf_r+0x1de>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	f000 fb40 	bl	80041a0 <__sccl>
 8003b20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b26:	9341      	str	r3, [sp, #260]	; 0x104
 8003b28:	4605      	mov	r5, r0
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e7cf      	b.n	8003ace <__ssvfiscanf_r+0x1de>
 8003b2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b34:	9341      	str	r3, [sp, #260]	; 0x104
 8003b36:	2300      	movs	r3, #0
 8003b38:	e7c9      	b.n	8003ace <__ssvfiscanf_r+0x1de>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e7c7      	b.n	8003ace <__ssvfiscanf_r+0x1de>
 8003b3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003b40:	06c3      	lsls	r3, r0, #27
 8003b42:	f53f aeff 	bmi.w	8003944 <__ssvfiscanf_r+0x54>
 8003b46:	9b00      	ldr	r3, [sp, #0]
 8003b48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b4a:	1d19      	adds	r1, r3, #4
 8003b4c:	9100      	str	r1, [sp, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	07c0      	lsls	r0, r0, #31
 8003b52:	bf4c      	ite	mi
 8003b54:	801a      	strhmi	r2, [r3, #0]
 8003b56:	601a      	strpl	r2, [r3, #0]
 8003b58:	e6f4      	b.n	8003944 <__ssvfiscanf_r+0x54>
 8003b5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4630      	mov	r0, r6
 8003b60:	4798      	blx	r3
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d0b7      	beq.n	8003ad6 <__ssvfiscanf_r+0x1e6>
 8003b66:	e79d      	b.n	8003aa4 <__ssvfiscanf_r+0x1b4>
 8003b68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003b6a:	3201      	adds	r2, #1
 8003b6c:	9245      	str	r2, [sp, #276]	; 0x114
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	3a01      	subs	r2, #1
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	6062      	str	r2, [r4, #4]
 8003b76:	dd02      	ble.n	8003b7e <__ssvfiscanf_r+0x28e>
 8003b78:	3301      	adds	r3, #1
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	e7ae      	b.n	8003adc <__ssvfiscanf_r+0x1ec>
 8003b7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003b80:	4621      	mov	r1, r4
 8003b82:	4630      	mov	r0, r6
 8003b84:	4798      	blx	r3
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d0a8      	beq.n	8003adc <__ssvfiscanf_r+0x1ec>
 8003b8a:	e78b      	b.n	8003aa4 <__ssvfiscanf_r+0x1b4>
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	dc06      	bgt.n	8003b9e <__ssvfiscanf_r+0x2ae>
 8003b90:	466b      	mov	r3, sp
 8003b92:	4622      	mov	r2, r4
 8003b94:	a941      	add	r1, sp, #260	; 0x104
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 fa0e 	bl	8003fb8 <_scanf_i>
 8003b9c:	e7ac      	b.n	8003af8 <__ssvfiscanf_r+0x208>
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <__ssvfiscanf_r+0x2ec>)
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f43f aecf 	beq.w	8003944 <__ssvfiscanf_r+0x54>
 8003ba6:	466b      	mov	r3, sp
 8003ba8:	4622      	mov	r2, r4
 8003baa:	a941      	add	r1, sp, #260	; 0x104
 8003bac:	4630      	mov	r0, r6
 8003bae:	f3af 8000 	nop.w
 8003bb2:	e7a1      	b.n	8003af8 <__ssvfiscanf_r+0x208>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bba:	bf18      	it	ne
 8003bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8003bc0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003bca:	e7f9      	b.n	8003bc0 <__ssvfiscanf_r+0x2d0>
 8003bcc:	0800383d 	.word	0x0800383d
 8003bd0:	080038b7 	.word	0x080038b7
 8003bd4:	0800480f 	.word	0x0800480f
 8003bd8:	080047c6 	.word	0x080047c6
 8003bdc:	00000000 	.word	0x00000000

08003be0 <_printf_common>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	4616      	mov	r6, r2
 8003be6:	4699      	mov	r9, r3
 8003be8:	688a      	ldr	r2, [r1, #8]
 8003bea:	690b      	ldr	r3, [r1, #16]
 8003bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bfb8      	it	lt
 8003bf4:	4613      	movlt	r3, r2
 8003bf6:	6033      	str	r3, [r6, #0]
 8003bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	b10a      	cbz	r2, 8003c06 <_printf_common+0x26>
 8003c02:	3301      	adds	r3, #1
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	0699      	lsls	r1, r3, #26
 8003c0a:	bf42      	ittt	mi
 8003c0c:	6833      	ldrmi	r3, [r6, #0]
 8003c0e:	3302      	addmi	r3, #2
 8003c10:	6033      	strmi	r3, [r6, #0]
 8003c12:	6825      	ldr	r5, [r4, #0]
 8003c14:	f015 0506 	ands.w	r5, r5, #6
 8003c18:	d106      	bne.n	8003c28 <_printf_common+0x48>
 8003c1a:	f104 0a19 	add.w	sl, r4, #25
 8003c1e:	68e3      	ldr	r3, [r4, #12]
 8003c20:	6832      	ldr	r2, [r6, #0]
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	42ab      	cmp	r3, r5
 8003c26:	dc26      	bgt.n	8003c76 <_printf_common+0x96>
 8003c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c2c:	1e13      	subs	r3, r2, #0
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	bf18      	it	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	0692      	lsls	r2, r2, #26
 8003c36:	d42b      	bmi.n	8003c90 <_printf_common+0xb0>
 8003c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	4638      	mov	r0, r7
 8003c40:	47c0      	blx	r8
 8003c42:	3001      	adds	r0, #1
 8003c44:	d01e      	beq.n	8003c84 <_printf_common+0xa4>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	68e5      	ldr	r5, [r4, #12]
 8003c4a:	6832      	ldr	r2, [r6, #0]
 8003c4c:	f003 0306 	and.w	r3, r3, #6
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	bf08      	it	eq
 8003c54:	1aad      	subeq	r5, r5, r2
 8003c56:	68a3      	ldr	r3, [r4, #8]
 8003c58:	6922      	ldr	r2, [r4, #16]
 8003c5a:	bf0c      	ite	eq
 8003c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c60:	2500      	movne	r5, #0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bfc4      	itt	gt
 8003c66:	1a9b      	subgt	r3, r3, r2
 8003c68:	18ed      	addgt	r5, r5, r3
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	341a      	adds	r4, #26
 8003c6e:	42b5      	cmp	r5, r6
 8003c70:	d11a      	bne.n	8003ca8 <_printf_common+0xc8>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e008      	b.n	8003c88 <_printf_common+0xa8>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4652      	mov	r2, sl
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	47c0      	blx	r8
 8003c80:	3001      	adds	r0, #1
 8003c82:	d103      	bne.n	8003c8c <_printf_common+0xac>
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8c:	3501      	adds	r5, #1
 8003c8e:	e7c6      	b.n	8003c1e <_printf_common+0x3e>
 8003c90:	18e1      	adds	r1, r4, r3
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	2030      	movs	r0, #48	; 0x30
 8003c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c9a:	4422      	add	r2, r4
 8003c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	e7c7      	b.n	8003c38 <_printf_common+0x58>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4622      	mov	r2, r4
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	47c0      	blx	r8
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d0e6      	beq.n	8003c84 <_printf_common+0xa4>
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7d9      	b.n	8003c6e <_printf_common+0x8e>
	...

08003cbc <_printf_i>:
 8003cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	4691      	mov	r9, r2
 8003cc4:	7e27      	ldrb	r7, [r4, #24]
 8003cc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cc8:	2f78      	cmp	r7, #120	; 0x78
 8003cca:	4680      	mov	r8, r0
 8003ccc:	469a      	mov	sl, r3
 8003cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cd2:	d807      	bhi.n	8003ce4 <_printf_i+0x28>
 8003cd4:	2f62      	cmp	r7, #98	; 0x62
 8003cd6:	d80a      	bhi.n	8003cee <_printf_i+0x32>
 8003cd8:	2f00      	cmp	r7, #0
 8003cda:	f000 80d8 	beq.w	8003e8e <_printf_i+0x1d2>
 8003cde:	2f58      	cmp	r7, #88	; 0x58
 8003ce0:	f000 80a3 	beq.w	8003e2a <_printf_i+0x16e>
 8003ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cec:	e03a      	b.n	8003d64 <_printf_i+0xa8>
 8003cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cf2:	2b15      	cmp	r3, #21
 8003cf4:	d8f6      	bhi.n	8003ce4 <_printf_i+0x28>
 8003cf6:	a001      	add	r0, pc, #4	; (adr r0, 8003cfc <_printf_i+0x40>)
 8003cf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003ce5 	.word	0x08003ce5
 8003d08:	08003ce5 	.word	0x08003ce5
 8003d0c:	08003ce5 	.word	0x08003ce5
 8003d10:	08003ce5 	.word	0x08003ce5
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003ce5 	.word	0x08003ce5
 8003d1c:	08003ce5 	.word	0x08003ce5
 8003d20:	08003ce5 	.word	0x08003ce5
 8003d24:	08003ce5 	.word	0x08003ce5
 8003d28:	08003e75 	.word	0x08003e75
 8003d2c:	08003d99 	.word	0x08003d99
 8003d30:	08003e57 	.word	0x08003e57
 8003d34:	08003ce5 	.word	0x08003ce5
 8003d38:	08003ce5 	.word	0x08003ce5
 8003d3c:	08003e97 	.word	0x08003e97
 8003d40:	08003ce5 	.word	0x08003ce5
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003ce5 	.word	0x08003ce5
 8003d4c:	08003ce5 	.word	0x08003ce5
 8003d50:	08003e5f 	.word	0x08003e5f
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	600a      	str	r2, [r1, #0]
 8003d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0a3      	b.n	8003eb0 <_printf_i+0x1f4>
 8003d68:	6825      	ldr	r5, [r4, #0]
 8003d6a:	6808      	ldr	r0, [r1, #0]
 8003d6c:	062e      	lsls	r6, r5, #24
 8003d6e:	f100 0304 	add.w	r3, r0, #4
 8003d72:	d50a      	bpl.n	8003d8a <_printf_i+0xce>
 8003d74:	6805      	ldr	r5, [r0, #0]
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	da03      	bge.n	8003d84 <_printf_i+0xc8>
 8003d7c:	232d      	movs	r3, #45	; 0x2d
 8003d7e:	426d      	negs	r5, r5
 8003d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d84:	485e      	ldr	r0, [pc, #376]	; (8003f00 <_printf_i+0x244>)
 8003d86:	230a      	movs	r3, #10
 8003d88:	e019      	b.n	8003dbe <_printf_i+0x102>
 8003d8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d8e:	6805      	ldr	r5, [r0, #0]
 8003d90:	600b      	str	r3, [r1, #0]
 8003d92:	bf18      	it	ne
 8003d94:	b22d      	sxthne	r5, r5
 8003d96:	e7ef      	b.n	8003d78 <_printf_i+0xbc>
 8003d98:	680b      	ldr	r3, [r1, #0]
 8003d9a:	6825      	ldr	r5, [r4, #0]
 8003d9c:	1d18      	adds	r0, r3, #4
 8003d9e:	6008      	str	r0, [r1, #0]
 8003da0:	0628      	lsls	r0, r5, #24
 8003da2:	d501      	bpl.n	8003da8 <_printf_i+0xec>
 8003da4:	681d      	ldr	r5, [r3, #0]
 8003da6:	e002      	b.n	8003dae <_printf_i+0xf2>
 8003da8:	0669      	lsls	r1, r5, #25
 8003daa:	d5fb      	bpl.n	8003da4 <_printf_i+0xe8>
 8003dac:	881d      	ldrh	r5, [r3, #0]
 8003dae:	4854      	ldr	r0, [pc, #336]	; (8003f00 <_printf_i+0x244>)
 8003db0:	2f6f      	cmp	r7, #111	; 0x6f
 8003db2:	bf0c      	ite	eq
 8003db4:	2308      	moveq	r3, #8
 8003db6:	230a      	movne	r3, #10
 8003db8:	2100      	movs	r1, #0
 8003dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dbe:	6866      	ldr	r6, [r4, #4]
 8003dc0:	60a6      	str	r6, [r4, #8]
 8003dc2:	2e00      	cmp	r6, #0
 8003dc4:	bfa2      	ittt	ge
 8003dc6:	6821      	ldrge	r1, [r4, #0]
 8003dc8:	f021 0104 	bicge.w	r1, r1, #4
 8003dcc:	6021      	strge	r1, [r4, #0]
 8003dce:	b90d      	cbnz	r5, 8003dd4 <_printf_i+0x118>
 8003dd0:	2e00      	cmp	r6, #0
 8003dd2:	d04d      	beq.n	8003e70 <_printf_i+0x1b4>
 8003dd4:	4616      	mov	r6, r2
 8003dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dda:	fb03 5711 	mls	r7, r3, r1, r5
 8003dde:	5dc7      	ldrb	r7, [r0, r7]
 8003de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003de4:	462f      	mov	r7, r5
 8003de6:	42bb      	cmp	r3, r7
 8003de8:	460d      	mov	r5, r1
 8003dea:	d9f4      	bls.n	8003dd6 <_printf_i+0x11a>
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d10b      	bne.n	8003e08 <_printf_i+0x14c>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	07df      	lsls	r7, r3, #31
 8003df4:	d508      	bpl.n	8003e08 <_printf_i+0x14c>
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	6861      	ldr	r1, [r4, #4]
 8003dfa:	4299      	cmp	r1, r3
 8003dfc:	bfde      	ittt	le
 8003dfe:	2330      	movle	r3, #48	; 0x30
 8003e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e04:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003e08:	1b92      	subs	r2, r2, r6
 8003e0a:	6122      	str	r2, [r4, #16]
 8003e0c:	f8cd a000 	str.w	sl, [sp]
 8003e10:	464b      	mov	r3, r9
 8003e12:	aa03      	add	r2, sp, #12
 8003e14:	4621      	mov	r1, r4
 8003e16:	4640      	mov	r0, r8
 8003e18:	f7ff fee2 	bl	8003be0 <_printf_common>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d14c      	bne.n	8003eba <_printf_i+0x1fe>
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e24:	b004      	add	sp, #16
 8003e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2a:	4835      	ldr	r0, [pc, #212]	; (8003f00 <_printf_i+0x244>)
 8003e2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	680e      	ldr	r6, [r1, #0]
 8003e34:	061f      	lsls	r7, r3, #24
 8003e36:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e3a:	600e      	str	r6, [r1, #0]
 8003e3c:	d514      	bpl.n	8003e68 <_printf_i+0x1ac>
 8003e3e:	07d9      	lsls	r1, r3, #31
 8003e40:	bf44      	itt	mi
 8003e42:	f043 0320 	orrmi.w	r3, r3, #32
 8003e46:	6023      	strmi	r3, [r4, #0]
 8003e48:	b91d      	cbnz	r5, 8003e52 <_printf_i+0x196>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	f023 0320 	bic.w	r3, r3, #32
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	2310      	movs	r3, #16
 8003e54:	e7b0      	b.n	8003db8 <_printf_i+0xfc>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f043 0320 	orr.w	r3, r3, #32
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	2378      	movs	r3, #120	; 0x78
 8003e60:	4828      	ldr	r0, [pc, #160]	; (8003f04 <_printf_i+0x248>)
 8003e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e66:	e7e3      	b.n	8003e30 <_printf_i+0x174>
 8003e68:	065e      	lsls	r6, r3, #25
 8003e6a:	bf48      	it	mi
 8003e6c:	b2ad      	uxthmi	r5, r5
 8003e6e:	e7e6      	b.n	8003e3e <_printf_i+0x182>
 8003e70:	4616      	mov	r6, r2
 8003e72:	e7bb      	b.n	8003dec <_printf_i+0x130>
 8003e74:	680b      	ldr	r3, [r1, #0]
 8003e76:	6826      	ldr	r6, [r4, #0]
 8003e78:	6960      	ldr	r0, [r4, #20]
 8003e7a:	1d1d      	adds	r5, r3, #4
 8003e7c:	600d      	str	r5, [r1, #0]
 8003e7e:	0635      	lsls	r5, r6, #24
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	d501      	bpl.n	8003e88 <_printf_i+0x1cc>
 8003e84:	6018      	str	r0, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <_printf_i+0x1d2>
 8003e88:	0671      	lsls	r1, r6, #25
 8003e8a:	d5fb      	bpl.n	8003e84 <_printf_i+0x1c8>
 8003e8c:	8018      	strh	r0, [r3, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6123      	str	r3, [r4, #16]
 8003e92:	4616      	mov	r6, r2
 8003e94:	e7ba      	b.n	8003e0c <_printf_i+0x150>
 8003e96:	680b      	ldr	r3, [r1, #0]
 8003e98:	1d1a      	adds	r2, r3, #4
 8003e9a:	600a      	str	r2, [r1, #0]
 8003e9c:	681e      	ldr	r6, [r3, #0]
 8003e9e:	6862      	ldr	r2, [r4, #4]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7fc f9bc 	bl	8000220 <memchr>
 8003ea8:	b108      	cbz	r0, 8003eae <_printf_i+0x1f2>
 8003eaa:	1b80      	subs	r0, r0, r6
 8003eac:	6060      	str	r0, [r4, #4]
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eb8:	e7a8      	b.n	8003e0c <_printf_i+0x150>
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	47d0      	blx	sl
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d0ab      	beq.n	8003e20 <_printf_i+0x164>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	079b      	lsls	r3, r3, #30
 8003ecc:	d413      	bmi.n	8003ef6 <_printf_i+0x23a>
 8003ece:	68e0      	ldr	r0, [r4, #12]
 8003ed0:	9b03      	ldr	r3, [sp, #12]
 8003ed2:	4298      	cmp	r0, r3
 8003ed4:	bfb8      	it	lt
 8003ed6:	4618      	movlt	r0, r3
 8003ed8:	e7a4      	b.n	8003e24 <_printf_i+0x168>
 8003eda:	2301      	movs	r3, #1
 8003edc:	4632      	mov	r2, r6
 8003ede:	4649      	mov	r1, r9
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	47d0      	blx	sl
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d09b      	beq.n	8003e20 <_printf_i+0x164>
 8003ee8:	3501      	adds	r5, #1
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	9903      	ldr	r1, [sp, #12]
 8003eee:	1a5b      	subs	r3, r3, r1
 8003ef0:	42ab      	cmp	r3, r5
 8003ef2:	dcf2      	bgt.n	8003eda <_printf_i+0x21e>
 8003ef4:	e7eb      	b.n	8003ece <_printf_i+0x212>
 8003ef6:	2500      	movs	r5, #0
 8003ef8:	f104 0619 	add.w	r6, r4, #25
 8003efc:	e7f5      	b.n	8003eea <_printf_i+0x22e>
 8003efe:	bf00      	nop
 8003f00:	080047d1 	.word	0x080047d1
 8003f04:	080047e2 	.word	0x080047e2

08003f08 <_scanf_chars>:
 8003f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f0c:	4615      	mov	r5, r2
 8003f0e:	688a      	ldr	r2, [r1, #8]
 8003f10:	4680      	mov	r8, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	b932      	cbnz	r2, 8003f24 <_scanf_chars+0x1c>
 8003f16:	698a      	ldr	r2, [r1, #24]
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2201      	moveq	r2, #1
 8003f1e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8003f22:	608a      	str	r2, [r1, #8]
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003fb4 <_scanf_chars+0xac>
 8003f2a:	06d1      	lsls	r1, r2, #27
 8003f2c:	bf5f      	itttt	pl
 8003f2e:	681a      	ldrpl	r2, [r3, #0]
 8003f30:	1d11      	addpl	r1, r2, #4
 8003f32:	6019      	strpl	r1, [r3, #0]
 8003f34:	6816      	ldrpl	r6, [r2, #0]
 8003f36:	2700      	movs	r7, #0
 8003f38:	69a0      	ldr	r0, [r4, #24]
 8003f3a:	b188      	cbz	r0, 8003f60 <_scanf_chars+0x58>
 8003f3c:	2801      	cmp	r0, #1
 8003f3e:	d107      	bne.n	8003f50 <_scanf_chars+0x48>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	6963      	ldr	r3, [r4, #20]
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	b953      	cbnz	r3, 8003f60 <_scanf_chars+0x58>
 8003f4a:	bb27      	cbnz	r7, 8003f96 <_scanf_chars+0x8e>
 8003f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f50:	2802      	cmp	r0, #2
 8003f52:	d120      	bne.n	8003f96 <_scanf_chars+0x8e>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	d41a      	bmi.n	8003f96 <_scanf_chars+0x8e>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	06da      	lsls	r2, r3, #27
 8003f64:	bf5e      	ittt	pl
 8003f66:	682b      	ldrpl	r3, [r5, #0]
 8003f68:	781b      	ldrbpl	r3, [r3, #0]
 8003f6a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003f6e:	682a      	ldr	r2, [r5, #0]
 8003f70:	686b      	ldr	r3, [r5, #4]
 8003f72:	3201      	adds	r2, #1
 8003f74:	602a      	str	r2, [r5, #0]
 8003f76:	68a2      	ldr	r2, [r4, #8]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	3a01      	subs	r2, #1
 8003f7c:	606b      	str	r3, [r5, #4]
 8003f7e:	3701      	adds	r7, #1
 8003f80:	60a2      	str	r2, [r4, #8]
 8003f82:	b142      	cbz	r2, 8003f96 <_scanf_chars+0x8e>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dcd7      	bgt.n	8003f38 <_scanf_chars+0x30>
 8003f88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	4640      	mov	r0, r8
 8003f90:	4798      	blx	r3
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0d0      	beq.n	8003f38 <_scanf_chars+0x30>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	f013 0310 	ands.w	r3, r3, #16
 8003f9c:	d105      	bne.n	8003faa <_scanf_chars+0xa2>
 8003f9e:	68e2      	ldr	r2, [r4, #12]
 8003fa0:	3201      	adds	r2, #1
 8003fa2:	60e2      	str	r2, [r4, #12]
 8003fa4:	69a2      	ldr	r2, [r4, #24]
 8003fa6:	b102      	cbz	r2, 8003faa <_scanf_chars+0xa2>
 8003fa8:	7033      	strb	r3, [r6, #0]
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	441f      	add	r7, r3
 8003fae:	6127      	str	r7, [r4, #16]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7cb      	b.n	8003f4c <_scanf_chars+0x44>
 8003fb4:	0800480f 	.word	0x0800480f

08003fb8 <_scanf_i>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	4698      	mov	r8, r3
 8003fbe:	4b74      	ldr	r3, [pc, #464]	; (8004190 <_scanf_i+0x1d8>)
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	4682      	mov	sl, r0
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	ab03      	add	r3, sp, #12
 8003fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fd2:	4b70      	ldr	r3, [pc, #448]	; (8004194 <_scanf_i+0x1dc>)
 8003fd4:	69a1      	ldr	r1, [r4, #24]
 8003fd6:	4a70      	ldr	r2, [pc, #448]	; (8004198 <_scanf_i+0x1e0>)
 8003fd8:	2903      	cmp	r1, #3
 8003fda:	bf18      	it	ne
 8003fdc:	461a      	movne	r2, r3
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	9201      	str	r2, [sp, #4]
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fe8:	bf88      	it	hi
 8003fea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003fee:	4627      	mov	r7, r4
 8003ff0:	bf82      	ittt	hi
 8003ff2:	eb03 0905 	addhi.w	r9, r3, r5
 8003ff6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003ffa:	60a3      	strhi	r3, [r4, #8]
 8003ffc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004000:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004004:	bf98      	it	ls
 8004006:	f04f 0900 	movls.w	r9, #0
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	463d      	mov	r5, r7
 800400e:	f04f 0b00 	mov.w	fp, #0
 8004012:	6831      	ldr	r1, [r6, #0]
 8004014:	ab03      	add	r3, sp, #12
 8004016:	7809      	ldrb	r1, [r1, #0]
 8004018:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800401c:	2202      	movs	r2, #2
 800401e:	f7fc f8ff 	bl	8000220 <memchr>
 8004022:	b328      	cbz	r0, 8004070 <_scanf_i+0xb8>
 8004024:	f1bb 0f01 	cmp.w	fp, #1
 8004028:	d159      	bne.n	80040de <_scanf_i+0x126>
 800402a:	6862      	ldr	r2, [r4, #4]
 800402c:	b92a      	cbnz	r2, 800403a <_scanf_i+0x82>
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	2308      	movs	r3, #8
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	6063      	str	r3, [r4, #4]
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004040:	6022      	str	r2, [r4, #0]
 8004042:	68a2      	ldr	r2, [r4, #8]
 8004044:	1e51      	subs	r1, r2, #1
 8004046:	60a1      	str	r1, [r4, #8]
 8004048:	b192      	cbz	r2, 8004070 <_scanf_i+0xb8>
 800404a:	6832      	ldr	r2, [r6, #0]
 800404c:	1c51      	adds	r1, r2, #1
 800404e:	6031      	str	r1, [r6, #0]
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	f805 2b01 	strb.w	r2, [r5], #1
 8004056:	6872      	ldr	r2, [r6, #4]
 8004058:	3a01      	subs	r2, #1
 800405a:	2a00      	cmp	r2, #0
 800405c:	6072      	str	r2, [r6, #4]
 800405e:	dc07      	bgt.n	8004070 <_scanf_i+0xb8>
 8004060:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004064:	4631      	mov	r1, r6
 8004066:	4650      	mov	r0, sl
 8004068:	4790      	blx	r2
 800406a:	2800      	cmp	r0, #0
 800406c:	f040 8085 	bne.w	800417a <_scanf_i+0x1c2>
 8004070:	f10b 0b01 	add.w	fp, fp, #1
 8004074:	f1bb 0f03 	cmp.w	fp, #3
 8004078:	d1cb      	bne.n	8004012 <_scanf_i+0x5a>
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	b90b      	cbnz	r3, 8004082 <_scanf_i+0xca>
 800407e:	230a      	movs	r3, #10
 8004080:	6063      	str	r3, [r4, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	4945      	ldr	r1, [pc, #276]	; (800419c <_scanf_i+0x1e4>)
 8004086:	6960      	ldr	r0, [r4, #20]
 8004088:	1ac9      	subs	r1, r1, r3
 800408a:	f000 f889 	bl	80041a0 <__sccl>
 800408e:	f04f 0b00 	mov.w	fp, #0
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	6822      	ldr	r2, [r4, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03d      	beq.n	8004116 <_scanf_i+0x15e>
 800409a:	6831      	ldr	r1, [r6, #0]
 800409c:	6960      	ldr	r0, [r4, #20]
 800409e:	f891 c000 	ldrb.w	ip, [r1]
 80040a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d035      	beq.n	8004116 <_scanf_i+0x15e>
 80040aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80040ae:	d124      	bne.n	80040fa <_scanf_i+0x142>
 80040b0:	0510      	lsls	r0, r2, #20
 80040b2:	d522      	bpl.n	80040fa <_scanf_i+0x142>
 80040b4:	f10b 0b01 	add.w	fp, fp, #1
 80040b8:	f1b9 0f00 	cmp.w	r9, #0
 80040bc:	d003      	beq.n	80040c6 <_scanf_i+0x10e>
 80040be:	3301      	adds	r3, #1
 80040c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	6873      	ldr	r3, [r6, #4]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	6073      	str	r3, [r6, #4]
 80040ce:	dd1b      	ble.n	8004108 <_scanf_i+0x150>
 80040d0:	6833      	ldr	r3, [r6, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	6033      	str	r3, [r6, #0]
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60a3      	str	r3, [r4, #8]
 80040dc:	e7d9      	b.n	8004092 <_scanf_i+0xda>
 80040de:	f1bb 0f02 	cmp.w	fp, #2
 80040e2:	d1ae      	bne.n	8004042 <_scanf_i+0x8a>
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80040ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80040ee:	d1bf      	bne.n	8004070 <_scanf_i+0xb8>
 80040f0:	2310      	movs	r3, #16
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	e7a2      	b.n	8004040 <_scanf_i+0x88>
 80040fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	780b      	ldrb	r3, [r1, #0]
 8004102:	f805 3b01 	strb.w	r3, [r5], #1
 8004106:	e7de      	b.n	80040c6 <_scanf_i+0x10e>
 8004108:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800410c:	4631      	mov	r1, r6
 800410e:	4650      	mov	r0, sl
 8004110:	4798      	blx	r3
 8004112:	2800      	cmp	r0, #0
 8004114:	d0df      	beq.n	80040d6 <_scanf_i+0x11e>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	05d9      	lsls	r1, r3, #23
 800411a:	d50d      	bpl.n	8004138 <_scanf_i+0x180>
 800411c:	42bd      	cmp	r5, r7
 800411e:	d909      	bls.n	8004134 <_scanf_i+0x17c>
 8004120:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004128:	4632      	mov	r2, r6
 800412a:	4650      	mov	r0, sl
 800412c:	4798      	blx	r3
 800412e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004132:	464d      	mov	r5, r9
 8004134:	42bd      	cmp	r5, r7
 8004136:	d028      	beq.n	800418a <_scanf_i+0x1d2>
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	f012 0210 	ands.w	r2, r2, #16
 800413e:	d113      	bne.n	8004168 <_scanf_i+0x1b0>
 8004140:	702a      	strb	r2, [r5, #0]
 8004142:	6863      	ldr	r3, [r4, #4]
 8004144:	9e01      	ldr	r6, [sp, #4]
 8004146:	4639      	mov	r1, r7
 8004148:	4650      	mov	r0, sl
 800414a:	47b0      	blx	r6
 800414c:	f8d8 3000 	ldr.w	r3, [r8]
 8004150:	6821      	ldr	r1, [r4, #0]
 8004152:	1d1a      	adds	r2, r3, #4
 8004154:	f8c8 2000 	str.w	r2, [r8]
 8004158:	f011 0f20 	tst.w	r1, #32
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	d00f      	beq.n	8004180 <_scanf_i+0x1c8>
 8004160:	6018      	str	r0, [r3, #0]
 8004162:	68e3      	ldr	r3, [r4, #12]
 8004164:	3301      	adds	r3, #1
 8004166:	60e3      	str	r3, [r4, #12]
 8004168:	1bed      	subs	r5, r5, r7
 800416a:	44ab      	add	fp, r5
 800416c:	6925      	ldr	r5, [r4, #16]
 800416e:	445d      	add	r5, fp
 8004170:	6125      	str	r5, [r4, #16]
 8004172:	2000      	movs	r0, #0
 8004174:	b007      	add	sp, #28
 8004176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417a:	f04f 0b00 	mov.w	fp, #0
 800417e:	e7ca      	b.n	8004116 <_scanf_i+0x15e>
 8004180:	07ca      	lsls	r2, r1, #31
 8004182:	bf4c      	ite	mi
 8004184:	8018      	strhmi	r0, [r3, #0]
 8004186:	6018      	strpl	r0, [r3, #0]
 8004188:	e7eb      	b.n	8004162 <_scanf_i+0x1aa>
 800418a:	2001      	movs	r0, #1
 800418c:	e7f2      	b.n	8004174 <_scanf_i+0x1bc>
 800418e:	bf00      	nop
 8004190:	08004788 	.word	0x08004788
 8004194:	08004419 	.word	0x08004419
 8004198:	0800431d 	.word	0x0800431d
 800419c:	0800480c 	.word	0x0800480c

080041a0 <__sccl>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	780b      	ldrb	r3, [r1, #0]
 80041a4:	4604      	mov	r4, r0
 80041a6:	2b5e      	cmp	r3, #94	; 0x5e
 80041a8:	bf0b      	itete	eq
 80041aa:	784b      	ldrbeq	r3, [r1, #1]
 80041ac:	1c48      	addne	r0, r1, #1
 80041ae:	1c88      	addeq	r0, r1, #2
 80041b0:	2200      	movne	r2, #0
 80041b2:	bf08      	it	eq
 80041b4:	2201      	moveq	r2, #1
 80041b6:	1e61      	subs	r1, r4, #1
 80041b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80041bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80041c0:	42a9      	cmp	r1, r5
 80041c2:	d1fb      	bne.n	80041bc <__sccl+0x1c>
 80041c4:	b90b      	cbnz	r3, 80041ca <__sccl+0x2a>
 80041c6:	3801      	subs	r0, #1
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
 80041ca:	f082 0101 	eor.w	r1, r2, #1
 80041ce:	54e1      	strb	r1, [r4, r3]
 80041d0:	1c42      	adds	r2, r0, #1
 80041d2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80041d6:	2d2d      	cmp	r5, #45	; 0x2d
 80041d8:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80041dc:	4610      	mov	r0, r2
 80041de:	d006      	beq.n	80041ee <__sccl+0x4e>
 80041e0:	2d5d      	cmp	r5, #93	; 0x5d
 80041e2:	d0f1      	beq.n	80041c8 <__sccl+0x28>
 80041e4:	b90d      	cbnz	r5, 80041ea <__sccl+0x4a>
 80041e6:	4630      	mov	r0, r6
 80041e8:	e7ee      	b.n	80041c8 <__sccl+0x28>
 80041ea:	462b      	mov	r3, r5
 80041ec:	e7ef      	b.n	80041ce <__sccl+0x2e>
 80041ee:	7816      	ldrb	r6, [r2, #0]
 80041f0:	2e5d      	cmp	r6, #93	; 0x5d
 80041f2:	d0fa      	beq.n	80041ea <__sccl+0x4a>
 80041f4:	42b3      	cmp	r3, r6
 80041f6:	dcf8      	bgt.n	80041ea <__sccl+0x4a>
 80041f8:	4618      	mov	r0, r3
 80041fa:	3001      	adds	r0, #1
 80041fc:	4286      	cmp	r6, r0
 80041fe:	5421      	strb	r1, [r4, r0]
 8004200:	dcfb      	bgt.n	80041fa <__sccl+0x5a>
 8004202:	43d8      	mvns	r0, r3
 8004204:	4430      	add	r0, r6
 8004206:	1c5d      	adds	r5, r3, #1
 8004208:	42b3      	cmp	r3, r6
 800420a:	bfa8      	it	ge
 800420c:	2000      	movge	r0, #0
 800420e:	182b      	adds	r3, r5, r0
 8004210:	3202      	adds	r2, #2
 8004212:	e7de      	b.n	80041d2 <__sccl+0x32>

08004214 <_strtol_l.isra.0>:
 8004214:	2b01      	cmp	r3, #1
 8004216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421a:	d001      	beq.n	8004220 <_strtol_l.isra.0+0xc>
 800421c:	2b24      	cmp	r3, #36	; 0x24
 800421e:	d906      	bls.n	800422e <_strtol_l.isra.0+0x1a>
 8004220:	f7ff f8f6 	bl	8003410 <__errno>
 8004224:	2316      	movs	r3, #22
 8004226:	6003      	str	r3, [r0, #0]
 8004228:	2000      	movs	r0, #0
 800422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422e:	4f3a      	ldr	r7, [pc, #232]	; (8004318 <_strtol_l.isra.0+0x104>)
 8004230:	468e      	mov	lr, r1
 8004232:	4676      	mov	r6, lr
 8004234:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004238:	5de5      	ldrb	r5, [r4, r7]
 800423a:	f015 0508 	ands.w	r5, r5, #8
 800423e:	d1f8      	bne.n	8004232 <_strtol_l.isra.0+0x1e>
 8004240:	2c2d      	cmp	r4, #45	; 0x2d
 8004242:	d134      	bne.n	80042ae <_strtol_l.isra.0+0x9a>
 8004244:	f89e 4000 	ldrb.w	r4, [lr]
 8004248:	f04f 0801 	mov.w	r8, #1
 800424c:	f106 0e02 	add.w	lr, r6, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05c      	beq.n	800430e <_strtol_l.isra.0+0xfa>
 8004254:	2b10      	cmp	r3, #16
 8004256:	d10c      	bne.n	8004272 <_strtol_l.isra.0+0x5e>
 8004258:	2c30      	cmp	r4, #48	; 0x30
 800425a:	d10a      	bne.n	8004272 <_strtol_l.isra.0+0x5e>
 800425c:	f89e 4000 	ldrb.w	r4, [lr]
 8004260:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004264:	2c58      	cmp	r4, #88	; 0x58
 8004266:	d14d      	bne.n	8004304 <_strtol_l.isra.0+0xf0>
 8004268:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800426c:	2310      	movs	r3, #16
 800426e:	f10e 0e02 	add.w	lr, lr, #2
 8004272:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004276:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800427a:	2600      	movs	r6, #0
 800427c:	fbbc f9f3 	udiv	r9, ip, r3
 8004280:	4635      	mov	r5, r6
 8004282:	fb03 ca19 	mls	sl, r3, r9, ip
 8004286:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800428a:	2f09      	cmp	r7, #9
 800428c:	d818      	bhi.n	80042c0 <_strtol_l.isra.0+0xac>
 800428e:	463c      	mov	r4, r7
 8004290:	42a3      	cmp	r3, r4
 8004292:	dd24      	ble.n	80042de <_strtol_l.isra.0+0xca>
 8004294:	2e00      	cmp	r6, #0
 8004296:	db1f      	blt.n	80042d8 <_strtol_l.isra.0+0xc4>
 8004298:	45a9      	cmp	r9, r5
 800429a:	d31d      	bcc.n	80042d8 <_strtol_l.isra.0+0xc4>
 800429c:	d101      	bne.n	80042a2 <_strtol_l.isra.0+0x8e>
 800429e:	45a2      	cmp	sl, r4
 80042a0:	db1a      	blt.n	80042d8 <_strtol_l.isra.0+0xc4>
 80042a2:	fb05 4503 	mla	r5, r5, r3, r4
 80042a6:	2601      	movs	r6, #1
 80042a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80042ac:	e7eb      	b.n	8004286 <_strtol_l.isra.0+0x72>
 80042ae:	2c2b      	cmp	r4, #43	; 0x2b
 80042b0:	bf08      	it	eq
 80042b2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80042b6:	46a8      	mov	r8, r5
 80042b8:	bf08      	it	eq
 80042ba:	f106 0e02 	addeq.w	lr, r6, #2
 80042be:	e7c7      	b.n	8004250 <_strtol_l.isra.0+0x3c>
 80042c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80042c4:	2f19      	cmp	r7, #25
 80042c6:	d801      	bhi.n	80042cc <_strtol_l.isra.0+0xb8>
 80042c8:	3c37      	subs	r4, #55	; 0x37
 80042ca:	e7e1      	b.n	8004290 <_strtol_l.isra.0+0x7c>
 80042cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80042d0:	2f19      	cmp	r7, #25
 80042d2:	d804      	bhi.n	80042de <_strtol_l.isra.0+0xca>
 80042d4:	3c57      	subs	r4, #87	; 0x57
 80042d6:	e7db      	b.n	8004290 <_strtol_l.isra.0+0x7c>
 80042d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80042dc:	e7e4      	b.n	80042a8 <_strtol_l.isra.0+0x94>
 80042de:	2e00      	cmp	r6, #0
 80042e0:	da05      	bge.n	80042ee <_strtol_l.isra.0+0xda>
 80042e2:	2322      	movs	r3, #34	; 0x22
 80042e4:	6003      	str	r3, [r0, #0]
 80042e6:	4665      	mov	r5, ip
 80042e8:	b942      	cbnz	r2, 80042fc <_strtol_l.isra.0+0xe8>
 80042ea:	4628      	mov	r0, r5
 80042ec:	e79d      	b.n	800422a <_strtol_l.isra.0+0x16>
 80042ee:	f1b8 0f00 	cmp.w	r8, #0
 80042f2:	d000      	beq.n	80042f6 <_strtol_l.isra.0+0xe2>
 80042f4:	426d      	negs	r5, r5
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	d0f7      	beq.n	80042ea <_strtol_l.isra.0+0xd6>
 80042fa:	b10e      	cbz	r6, 8004300 <_strtol_l.isra.0+0xec>
 80042fc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004300:	6011      	str	r1, [r2, #0]
 8004302:	e7f2      	b.n	80042ea <_strtol_l.isra.0+0xd6>
 8004304:	2430      	movs	r4, #48	; 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1b3      	bne.n	8004272 <_strtol_l.isra.0+0x5e>
 800430a:	2308      	movs	r3, #8
 800430c:	e7b1      	b.n	8004272 <_strtol_l.isra.0+0x5e>
 800430e:	2c30      	cmp	r4, #48	; 0x30
 8004310:	d0a4      	beq.n	800425c <_strtol_l.isra.0+0x48>
 8004312:	230a      	movs	r3, #10
 8004314:	e7ad      	b.n	8004272 <_strtol_l.isra.0+0x5e>
 8004316:	bf00      	nop
 8004318:	0800480f 	.word	0x0800480f

0800431c <_strtol_r>:
 800431c:	f7ff bf7a 	b.w	8004214 <_strtol_l.isra.0>

08004320 <_strtoul_l.isra.0>:
 8004320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004324:	4e3b      	ldr	r6, [pc, #236]	; (8004414 <_strtoul_l.isra.0+0xf4>)
 8004326:	4686      	mov	lr, r0
 8004328:	468c      	mov	ip, r1
 800432a:	4660      	mov	r0, ip
 800432c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004330:	5da5      	ldrb	r5, [r4, r6]
 8004332:	f015 0508 	ands.w	r5, r5, #8
 8004336:	d1f8      	bne.n	800432a <_strtoul_l.isra.0+0xa>
 8004338:	2c2d      	cmp	r4, #45	; 0x2d
 800433a:	d134      	bne.n	80043a6 <_strtoul_l.isra.0+0x86>
 800433c:	f89c 4000 	ldrb.w	r4, [ip]
 8004340:	f04f 0801 	mov.w	r8, #1
 8004344:	f100 0c02 	add.w	ip, r0, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05e      	beq.n	800440a <_strtoul_l.isra.0+0xea>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d10c      	bne.n	800436a <_strtoul_l.isra.0+0x4a>
 8004350:	2c30      	cmp	r4, #48	; 0x30
 8004352:	d10a      	bne.n	800436a <_strtoul_l.isra.0+0x4a>
 8004354:	f89c 0000 	ldrb.w	r0, [ip]
 8004358:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800435c:	2858      	cmp	r0, #88	; 0x58
 800435e:	d14f      	bne.n	8004400 <_strtoul_l.isra.0+0xe0>
 8004360:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004364:	2310      	movs	r3, #16
 8004366:	f10c 0c02 	add.w	ip, ip, #2
 800436a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800436e:	2500      	movs	r5, #0
 8004370:	fbb7 f7f3 	udiv	r7, r7, r3
 8004374:	fb03 f907 	mul.w	r9, r3, r7
 8004378:	ea6f 0909 	mvn.w	r9, r9
 800437c:	4628      	mov	r0, r5
 800437e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004382:	2e09      	cmp	r6, #9
 8004384:	d818      	bhi.n	80043b8 <_strtoul_l.isra.0+0x98>
 8004386:	4634      	mov	r4, r6
 8004388:	42a3      	cmp	r3, r4
 800438a:	dd24      	ble.n	80043d6 <_strtoul_l.isra.0+0xb6>
 800438c:	2d00      	cmp	r5, #0
 800438e:	db1f      	blt.n	80043d0 <_strtoul_l.isra.0+0xb0>
 8004390:	4287      	cmp	r7, r0
 8004392:	d31d      	bcc.n	80043d0 <_strtoul_l.isra.0+0xb0>
 8004394:	d101      	bne.n	800439a <_strtoul_l.isra.0+0x7a>
 8004396:	45a1      	cmp	r9, r4
 8004398:	db1a      	blt.n	80043d0 <_strtoul_l.isra.0+0xb0>
 800439a:	fb00 4003 	mla	r0, r0, r3, r4
 800439e:	2501      	movs	r5, #1
 80043a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80043a4:	e7eb      	b.n	800437e <_strtoul_l.isra.0+0x5e>
 80043a6:	2c2b      	cmp	r4, #43	; 0x2b
 80043a8:	bf08      	it	eq
 80043aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80043ae:	46a8      	mov	r8, r5
 80043b0:	bf08      	it	eq
 80043b2:	f100 0c02 	addeq.w	ip, r0, #2
 80043b6:	e7c7      	b.n	8004348 <_strtoul_l.isra.0+0x28>
 80043b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80043bc:	2e19      	cmp	r6, #25
 80043be:	d801      	bhi.n	80043c4 <_strtoul_l.isra.0+0xa4>
 80043c0:	3c37      	subs	r4, #55	; 0x37
 80043c2:	e7e1      	b.n	8004388 <_strtoul_l.isra.0+0x68>
 80043c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80043c8:	2e19      	cmp	r6, #25
 80043ca:	d804      	bhi.n	80043d6 <_strtoul_l.isra.0+0xb6>
 80043cc:	3c57      	subs	r4, #87	; 0x57
 80043ce:	e7db      	b.n	8004388 <_strtoul_l.isra.0+0x68>
 80043d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80043d4:	e7e4      	b.n	80043a0 <_strtoul_l.isra.0+0x80>
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	da07      	bge.n	80043ea <_strtoul_l.isra.0+0xca>
 80043da:	2322      	movs	r3, #34	; 0x22
 80043dc:	f8ce 3000 	str.w	r3, [lr]
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043e4:	b942      	cbnz	r2, 80043f8 <_strtoul_l.isra.0+0xd8>
 80043e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043ea:	f1b8 0f00 	cmp.w	r8, #0
 80043ee:	d000      	beq.n	80043f2 <_strtoul_l.isra.0+0xd2>
 80043f0:	4240      	negs	r0, r0
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	d0f7      	beq.n	80043e6 <_strtoul_l.isra.0+0xc6>
 80043f6:	b10d      	cbz	r5, 80043fc <_strtoul_l.isra.0+0xdc>
 80043f8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80043fc:	6011      	str	r1, [r2, #0]
 80043fe:	e7f2      	b.n	80043e6 <_strtoul_l.isra.0+0xc6>
 8004400:	2430      	movs	r4, #48	; 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1b1      	bne.n	800436a <_strtoul_l.isra.0+0x4a>
 8004406:	2308      	movs	r3, #8
 8004408:	e7af      	b.n	800436a <_strtoul_l.isra.0+0x4a>
 800440a:	2c30      	cmp	r4, #48	; 0x30
 800440c:	d0a2      	beq.n	8004354 <_strtoul_l.isra.0+0x34>
 800440e:	230a      	movs	r3, #10
 8004410:	e7ab      	b.n	800436a <_strtoul_l.isra.0+0x4a>
 8004412:	bf00      	nop
 8004414:	0800480f 	.word	0x0800480f

08004418 <_strtoul_r>:
 8004418:	f7ff bf82 	b.w	8004320 <_strtoul_l.isra.0>

0800441c <__submore>:
 800441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004420:	460c      	mov	r4, r1
 8004422:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004428:	4299      	cmp	r1, r3
 800442a:	d11d      	bne.n	8004468 <__submore+0x4c>
 800442c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004430:	f000 f89a 	bl	8004568 <_malloc_r>
 8004434:	b918      	cbnz	r0, 800443e <__submore+0x22>
 8004436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800443e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004442:	63a3      	str	r3, [r4, #56]	; 0x38
 8004444:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004448:	6360      	str	r0, [r4, #52]	; 0x34
 800444a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800444e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004452:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004456:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800445a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800445e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004462:	6020      	str	r0, [r4, #0]
 8004464:	2000      	movs	r0, #0
 8004466:	e7e8      	b.n	800443a <__submore+0x1e>
 8004468:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800446a:	0077      	lsls	r7, r6, #1
 800446c:	463a      	mov	r2, r7
 800446e:	f000 f8d5 	bl	800461c <_realloc_r>
 8004472:	4605      	mov	r5, r0
 8004474:	2800      	cmp	r0, #0
 8004476:	d0de      	beq.n	8004436 <__submore+0x1a>
 8004478:	eb00 0806 	add.w	r8, r0, r6
 800447c:	4601      	mov	r1, r0
 800447e:	4632      	mov	r2, r6
 8004480:	4640      	mov	r0, r8
 8004482:	f7fe ffef 	bl	8003464 <memcpy>
 8004486:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800448a:	f8c4 8000 	str.w	r8, [r4]
 800448e:	e7e9      	b.n	8004464 <__submore+0x48>

08004490 <__retarget_lock_acquire_recursive>:
 8004490:	4770      	bx	lr

08004492 <__retarget_lock_release_recursive>:
 8004492:	4770      	bx	lr

08004494 <memmove>:
 8004494:	4288      	cmp	r0, r1
 8004496:	b510      	push	{r4, lr}
 8004498:	eb01 0402 	add.w	r4, r1, r2
 800449c:	d902      	bls.n	80044a4 <memmove+0x10>
 800449e:	4284      	cmp	r4, r0
 80044a0:	4623      	mov	r3, r4
 80044a2:	d807      	bhi.n	80044b4 <memmove+0x20>
 80044a4:	1e43      	subs	r3, r0, #1
 80044a6:	42a1      	cmp	r1, r4
 80044a8:	d008      	beq.n	80044bc <memmove+0x28>
 80044aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044b2:	e7f8      	b.n	80044a6 <memmove+0x12>
 80044b4:	4402      	add	r2, r0
 80044b6:	4601      	mov	r1, r0
 80044b8:	428a      	cmp	r2, r1
 80044ba:	d100      	bne.n	80044be <memmove+0x2a>
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044c6:	e7f7      	b.n	80044b8 <memmove+0x24>

080044c8 <_free_r>:
 80044c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ca:	2900      	cmp	r1, #0
 80044cc:	d048      	beq.n	8004560 <_free_r+0x98>
 80044ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d2:	9001      	str	r0, [sp, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f1a1 0404 	sub.w	r4, r1, #4
 80044da:	bfb8      	it	lt
 80044dc:	18e4      	addlt	r4, r4, r3
 80044de:	f000 f8d3 	bl	8004688 <__malloc_lock>
 80044e2:	4a20      	ldr	r2, [pc, #128]	; (8004564 <_free_r+0x9c>)
 80044e4:	9801      	ldr	r0, [sp, #4]
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	4615      	mov	r5, r2
 80044ea:	b933      	cbnz	r3, 80044fa <_free_r+0x32>
 80044ec:	6063      	str	r3, [r4, #4]
 80044ee:	6014      	str	r4, [r2, #0]
 80044f0:	b003      	add	sp, #12
 80044f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f6:	f000 b8cd 	b.w	8004694 <__malloc_unlock>
 80044fa:	42a3      	cmp	r3, r4
 80044fc:	d90b      	bls.n	8004516 <_free_r+0x4e>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	1862      	adds	r2, r4, r1
 8004502:	4293      	cmp	r3, r2
 8004504:	bf04      	itt	eq
 8004506:	681a      	ldreq	r2, [r3, #0]
 8004508:	685b      	ldreq	r3, [r3, #4]
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	bf04      	itt	eq
 800450e:	1852      	addeq	r2, r2, r1
 8004510:	6022      	streq	r2, [r4, #0]
 8004512:	602c      	str	r4, [r5, #0]
 8004514:	e7ec      	b.n	80044f0 <_free_r+0x28>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x58>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x4e>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1855      	adds	r5, r2, r1
 8004524:	42a5      	cmp	r5, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x78>
 8004528:	6824      	ldr	r4, [r4, #0]
 800452a:	4421      	add	r1, r4
 800452c:	1854      	adds	r4, r2, r1
 800452e:	42a3      	cmp	r3, r4
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1dd      	bne.n	80044f0 <_free_r+0x28>
 8004534:	681c      	ldr	r4, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	6053      	str	r3, [r2, #4]
 800453a:	4421      	add	r1, r4
 800453c:	6011      	str	r1, [r2, #0]
 800453e:	e7d7      	b.n	80044f0 <_free_r+0x28>
 8004540:	d902      	bls.n	8004548 <_free_r+0x80>
 8004542:	230c      	movs	r3, #12
 8004544:	6003      	str	r3, [r0, #0]
 8004546:	e7d3      	b.n	80044f0 <_free_r+0x28>
 8004548:	6825      	ldr	r5, [r4, #0]
 800454a:	1961      	adds	r1, r4, r5
 800454c:	428b      	cmp	r3, r1
 800454e:	bf04      	itt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	bf04      	itt	eq
 8004558:	1949      	addeq	r1, r1, r5
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	6054      	str	r4, [r2, #4]
 800455e:	e7c7      	b.n	80044f0 <_free_r+0x28>
 8004560:	b003      	add	sp, #12
 8004562:	bd30      	pop	{r4, r5, pc}
 8004564:	200006e4 	.word	0x200006e4

08004568 <_malloc_r>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	1ccd      	adds	r5, r1, #3
 800456c:	f025 0503 	bic.w	r5, r5, #3
 8004570:	3508      	adds	r5, #8
 8004572:	2d0c      	cmp	r5, #12
 8004574:	bf38      	it	cc
 8004576:	250c      	movcc	r5, #12
 8004578:	2d00      	cmp	r5, #0
 800457a:	4606      	mov	r6, r0
 800457c:	db01      	blt.n	8004582 <_malloc_r+0x1a>
 800457e:	42a9      	cmp	r1, r5
 8004580:	d903      	bls.n	800458a <_malloc_r+0x22>
 8004582:	230c      	movs	r3, #12
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	2000      	movs	r0, #0
 8004588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458a:	f000 f87d 	bl	8004688 <__malloc_lock>
 800458e:	4921      	ldr	r1, [pc, #132]	; (8004614 <_malloc_r+0xac>)
 8004590:	680a      	ldr	r2, [r1, #0]
 8004592:	4614      	mov	r4, r2
 8004594:	b99c      	cbnz	r4, 80045be <_malloc_r+0x56>
 8004596:	4f20      	ldr	r7, [pc, #128]	; (8004618 <_malloc_r+0xb0>)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	b923      	cbnz	r3, 80045a6 <_malloc_r+0x3e>
 800459c:	4621      	mov	r1, r4
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f862 	bl	8004668 <_sbrk_r>
 80045a4:	6038      	str	r0, [r7, #0]
 80045a6:	4629      	mov	r1, r5
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 f85d 	bl	8004668 <_sbrk_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d123      	bne.n	80045fa <_malloc_r+0x92>
 80045b2:	230c      	movs	r3, #12
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	4630      	mov	r0, r6
 80045b8:	f000 f86c 	bl	8004694 <__malloc_unlock>
 80045bc:	e7e3      	b.n	8004586 <_malloc_r+0x1e>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	1b5b      	subs	r3, r3, r5
 80045c2:	d417      	bmi.n	80045f4 <_malloc_r+0x8c>
 80045c4:	2b0b      	cmp	r3, #11
 80045c6:	d903      	bls.n	80045d0 <_malloc_r+0x68>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	441c      	add	r4, r3
 80045cc:	6025      	str	r5, [r4, #0]
 80045ce:	e004      	b.n	80045da <_malloc_r+0x72>
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	42a2      	cmp	r2, r4
 80045d4:	bf0c      	ite	eq
 80045d6:	600b      	streq	r3, [r1, #0]
 80045d8:	6053      	strne	r3, [r2, #4]
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 f85a 	bl	8004694 <__malloc_unlock>
 80045e0:	f104 000b 	add.w	r0, r4, #11
 80045e4:	1d23      	adds	r3, r4, #4
 80045e6:	f020 0007 	bic.w	r0, r0, #7
 80045ea:	1ac2      	subs	r2, r0, r3
 80045ec:	d0cc      	beq.n	8004588 <_malloc_r+0x20>
 80045ee:	1a1b      	subs	r3, r3, r0
 80045f0:	50a3      	str	r3, [r4, r2]
 80045f2:	e7c9      	b.n	8004588 <_malloc_r+0x20>
 80045f4:	4622      	mov	r2, r4
 80045f6:	6864      	ldr	r4, [r4, #4]
 80045f8:	e7cc      	b.n	8004594 <_malloc_r+0x2c>
 80045fa:	1cc4      	adds	r4, r0, #3
 80045fc:	f024 0403 	bic.w	r4, r4, #3
 8004600:	42a0      	cmp	r0, r4
 8004602:	d0e3      	beq.n	80045cc <_malloc_r+0x64>
 8004604:	1a21      	subs	r1, r4, r0
 8004606:	4630      	mov	r0, r6
 8004608:	f000 f82e 	bl	8004668 <_sbrk_r>
 800460c:	3001      	adds	r0, #1
 800460e:	d1dd      	bne.n	80045cc <_malloc_r+0x64>
 8004610:	e7cf      	b.n	80045b2 <_malloc_r+0x4a>
 8004612:	bf00      	nop
 8004614:	200006e4 	.word	0x200006e4
 8004618:	200006e8 	.word	0x200006e8

0800461c <_realloc_r>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	4607      	mov	r7, r0
 8004620:	4614      	mov	r4, r2
 8004622:	460e      	mov	r6, r1
 8004624:	b921      	cbnz	r1, 8004630 <_realloc_r+0x14>
 8004626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800462a:	4611      	mov	r1, r2
 800462c:	f7ff bf9c 	b.w	8004568 <_malloc_r>
 8004630:	b922      	cbnz	r2, 800463c <_realloc_r+0x20>
 8004632:	f7ff ff49 	bl	80044c8 <_free_r>
 8004636:	4625      	mov	r5, r4
 8004638:	4628      	mov	r0, r5
 800463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463c:	f000 f830 	bl	80046a0 <_malloc_usable_size_r>
 8004640:	42a0      	cmp	r0, r4
 8004642:	d20f      	bcs.n	8004664 <_realloc_r+0x48>
 8004644:	4621      	mov	r1, r4
 8004646:	4638      	mov	r0, r7
 8004648:	f7ff ff8e 	bl	8004568 <_malloc_r>
 800464c:	4605      	mov	r5, r0
 800464e:	2800      	cmp	r0, #0
 8004650:	d0f2      	beq.n	8004638 <_realloc_r+0x1c>
 8004652:	4631      	mov	r1, r6
 8004654:	4622      	mov	r2, r4
 8004656:	f7fe ff05 	bl	8003464 <memcpy>
 800465a:	4631      	mov	r1, r6
 800465c:	4638      	mov	r0, r7
 800465e:	f7ff ff33 	bl	80044c8 <_free_r>
 8004662:	e7e9      	b.n	8004638 <_realloc_r+0x1c>
 8004664:	4635      	mov	r5, r6
 8004666:	e7e7      	b.n	8004638 <_realloc_r+0x1c>

08004668 <_sbrk_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d06      	ldr	r5, [pc, #24]	; (8004684 <_sbrk_r+0x1c>)
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	f7fc fd00 	bl	8001078 <_sbrk>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	d102      	bne.n	8004682 <_sbrk_r+0x1a>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b103      	cbz	r3, 8004682 <_sbrk_r+0x1a>
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	2000087c 	.word	0x2000087c

08004688 <__malloc_lock>:
 8004688:	4801      	ldr	r0, [pc, #4]	; (8004690 <__malloc_lock+0x8>)
 800468a:	f7ff bf01 	b.w	8004490 <__retarget_lock_acquire_recursive>
 800468e:	bf00      	nop
 8004690:	20000884 	.word	0x20000884

08004694 <__malloc_unlock>:
 8004694:	4801      	ldr	r0, [pc, #4]	; (800469c <__malloc_unlock+0x8>)
 8004696:	f7ff befc 	b.w	8004492 <__retarget_lock_release_recursive>
 800469a:	bf00      	nop
 800469c:	20000884 	.word	0x20000884

080046a0 <_malloc_usable_size_r>:
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f18      	subs	r0, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfbc      	itt	lt
 80046aa:	580b      	ldrlt	r3, [r1, r0]
 80046ac:	18c0      	addlt	r0, r0, r3
 80046ae:	4770      	bx	lr

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
